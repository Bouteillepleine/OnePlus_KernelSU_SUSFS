name: Build

permissions:
  contents: write
  actions: write

inputs:
  model:
    description: 'Device model'
    required: true
    type: string
  soc:
    description: 'System on Chip'
    required: true
    type: string
  branch:
    description: 'Kernel branch'
    required: true
    type: string
  manifest:
    description: 'Manifest file or URL'
    required: true
    type: string
  android_version:
    description: 'Android version'
    required: true
    type: string
  kernel_version:
    description: 'Kernel version'
    required: true
    type: string
  ksun_branch:
    description: 'KSU branch'
    required: true
    type: string
    default: 'stable'
  susfs_branch:
    description: 'SusFS branch'
    required: true
    type: string
    default: ''
  KSU_META:
    description: 'SukiSU Ultra branch/custom version identifier (e.g., susfs-main/⚡Ultra⚡)'
    required: false
    type: string
    default: 'susfs-main/⚡Ultra⚡'
  KPM:
    description: 'Enable KPM?'
    required: true
    type: boolean
    default: true
  HOOK:
    description: 'Hook type'
    required: false
    type: choice
    default: manual
    options:
      - kprobe
      - manual
      - tracepoint

runs:
  using: composite
  steps:
    - name: Setup Build System
      shell: bash
      run: |
        set -e
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> "$GITHUB_ENV"
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
        sudo docker image prune --all --force || true
        sudo apt-get purge -y aria2 ansible azure-cli shellcheck rpm xorriso zsync esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable google-cloud-sdk imagemagick libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl mercurial apt-transport-https mono-complete libmysqlclient unixodbc-dev yarn chrpath libssl-dev libxft-dev libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev snmp pollinate libpq-dev postgresql-client powershell ruby-full sphinxsearch subversion mongodb-org microsoft-edge-stable || true
        sudo apt-get autoremove -y || true
        sudo apt-get autoclean -y || true
        echo "ANDROID_VER=${{ inputs.android_version }}" >> "$GITHUB_ENV"
        echo "KERNEL_VER=${{ inputs.kernel_version }}" >> "$GITHUB_ENV"
        echo "CONFIG=${{ inputs.model }}" >> "$GITHUB_ENV"

    - name: Install Dependencies
      shell: bash
      run: |
        set -e
        sudo apt update -qq
        sudo apt install -y --no-install-recommends \
          python3 git curl libelf-dev libelf1 lld build-essential flex bison libssl-dev \
          libncurses-dev liblz4-tool zlib1g-dev libxml2-utils rsync unzip dwarves jq bc

    - name: Install Repo Tool
      shell: bash
      run: |
        set -e
        mkdir -p git-repo
        curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > git-repo/repo
        chmod +x git-repo/repo
        echo "REPO=$GITHUB_WORKSPACE/git-repo/repo" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3 / Patches / SUSFS
      shell: bash
      run: |
        set -e
        if [[ -z "${{ inputs.susfs_branch }}" ]]; then
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        else
          SUSFS_BRANCH="${{ inputs.susfs_branch }}"
        fi
        echo "SUSFS_BRANCH=$SUSFS_BRANCH" >> "$GITHUB_ENV"
        git clone https://github.com/Bouteillepleine/AnyKernel3.git -b gki-2.0
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        git clone https://gitlab.com/simonpunk/susfs4ksu.git
        cd susfs4ksu
        if git rev-parse --verify "origin/$SUSFS_BRANCH" >/dev/null 2>&1; then
          git checkout "$SUSFS_BRANCH"
        elif git show "$SUSFS_BRANCH" >/dev/null 2>&1; then
          git checkout "$SUSFS_BRANCH"
        else
          echo "Available upstream branches/tags:"
          git branch -a
          echo "ERROR: SUSFS branch/tag/commit '$SUSFS_BRANCH' not found"
          exit 1
        fi

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        set -e
        mkdir -p "${{ inputs.model }}"
        cd "${{ inputs.model }}"
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls "${{ inputs.manifest }}" -o .repo/manifests/temp_manifest.xml
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b "${{ inputs.branch }}" -m "${{ inputs.manifest }}" --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        $REPO sync -c --no-clone-bundle --no-tags --optimized-fetch -j"$(nproc)" --fail-fast

    - name: Clean ABI Exports
      shell: bash
      run: |
        set -e
        cd "${CONFIG}/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || true
        rm -f msm-kernel/android/abi_gki_protected_exports_* || true

    - name: Add SukiSU Ultra
      shell: bash
      run: |
        set -e
        cd "${CONFIG}/kernel_platform"
        META="${{ inputs.KSU_META }}"
        BRANCH_NAME="${META%%/*}"
        CUSTOM_TAG="${META#*/}"
        echo "SukiSU Ultra branch: $BRANCH_NAME  custom tag: $CUSTOM_TAG"
        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/setup.sh" | bash -s "$BRANCH_NAME"
        cd KernelSU
        BASE=10700
        COUNT=$(git rev-list --count HEAD || echo 0)
        KSUVER=$((COUNT + BASE))
        echo "KSUVER=$KSUVER" >> "$GITHUB_ENV"
        GIT_HASH=$(git rev-parse --short HEAD)
        echo "GIT_HASH=$GIT_HASH" >> "$GITHUB_ENV"
        KSU_API_VERSION=$(grep -m1 'KSU_VERSION_API :=' kernel/Makefile | awk -F'= ' '{print $2}' | tr -d '[:space:]')
        [ -z "$KSU_API_VERSION" ] && KSU_API_VERSION="unknown"
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> "$GITHUB_ENV"
        if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
          VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@$BRANCH_NAME"
        else
          VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$GIT_HASH]"
        fi
        echo "KSU_VERSION_FULL=$VERSION_FULL" >> "$GITHUB_ENV"
        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
        cat >> kernel/Makefile <<EOF
        define get_ksu_version_full
        $VERSION_FULL
        endef
        KSU_VERSION_API := $KSU_API_VERSION
        KSU_VERSION_FULL := $VERSION_FULL
        EOF
        KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
        echo "KSUVER=$KSU_VERSION" >> "$GITHUB_ENV"
        echo "::group::KernelSU Version Block"
        grep -A12 "get_ksu_version_full" kernel/Makefile || true
        echo "::endgroup::"

    - name: Apply SUSFS Patch (Hardened)
      shell: bash
      run: |
        set -euo pipefail
        cd "${CONFIG}/kernel_platform"
        ANDROID="${ANDROID_VER}"
        KV="${KERNEL_VER}"
        SUSFS_BRANCH="gki-${ANDROID}-${KV}"
        # Allow override from earlier step
        if [[ -n "${SUSFS_BRANCH_OVERRIDE:-}" ]]; then
          SUSFS_BRANCH="$SUSFS_BRANCH_OVERRIDE"
        fi
        cd common
        PATCH_FILE="50_add_susfs_in_${SUSFS_BRANCH}.patch"
        PATCH_PATH="../../susfs4ksu/kernel_patches/${PATCH_FILE}"
        if [ ! -f "$PATCH_PATH" ]; then
          echo "ERROR: SUSFS patch $PATCH_FILE not found."
          ls -1 ../../susfs4ksu/kernel_patches
          exit 1
        fi
        echo "Dry-run SUSFS patch"
        patch -p1 --forward --dry-run < "$PATCH_PATH"
        echo "Apply SUSFS patch"
        patch -p1 --forward < "$PATCH_PATH"
        echo "Copy supplemental SUSFS files"
        cp -a ../../susfs4ksu/kernel_patches/fs/. ./fs/
        cp -a ../../susfs4ksu/kernel_patches/include/linux/. ./include/linux/
        for EXTRA in security kernel; do
          if [ -d "../../susfs4ksu/kernel_patches/${EXTRA}" ]; then
            cp -a "../../susfs4ksu/kernel_patches/${EXTRA}/." "./${EXTRA}/"
          fi
        done
        # Trusty detection (device manifest fallback)
        TRUSTY_EXISTS=false
        XML="../../.repo/manifests_fallback/${CONFIG}.xml"
        if [ "$KV" = "6.6" ] && [ -f "$XML" ] && grep -q 'common-modules/trusty' "$XML"; then
          TRUSTY_EXISTS=true
        fi
        if [ "$KV" = "6.6" ] && [ "$TRUSTY_EXISTS" = "false" ] && ! [ -f include/trace/hooks/fs.h ]; then
          sed -i '/#include <trace\/hooks\/fs.h>/d' fs/namespace.c 2>/dev/null || true
        fi
        if find . -name '*.rej' | grep -q .; then
            echo "ERROR: Patch rejections present."
            find . -name '*.rej'
            exit 1
        fi
        REQD=(susfs_mnt_id_ida DEFAULT_SUS_MNT_ID DEFAULT_SUS_MNT_GROUP_ID susfs_is_current_ksu_domain susfs_is_current_zygote_domain)
        MISS=0
        for S in "${REQD[@]}"; do
          grep -R "$S" -n . >/dev/null 2>&1 || { echo "Missing symbol: $S"; MISS=1; }
        done
        [ $MISS -eq 0 ] || { echo "ERROR: Missing SUSFS symbols"; exit 1; }
        echo "SUSFS patch completed."
    
    - name: Apply Extra Patches (Hide Stuff + Hooks)
      shell: bash
      run: |
        set -e
        cd "${CONFIG}/kernel_platform/common"
        # These use --forward so re-running is safe, but they still swallow failures with || true.
        # Keep that behavior intentionally (can be hardened later).
        if [ -f ../../SukiSU_patch/69_hide_stuff.patch ]; then
          patch -p1 --forward -F 3 < ../../SukiSU_patch/69_hide_stuff.patch || true
        fi
        case "${{ inputs.HOOK }}" in
          manual)
            [ -f ../../SukiSU_patch/hooks/syscall_hooks.patch ] && patch -p1 --forward -F 3 < ../../SukiSU_patch/hooks/syscall_hooks.patch || true
            ;;
          tracepoint)
            [ -f ../../SukiSU_patch/hooks/tracepoint_hooks.patch ] && patch -p1 --forward -F 3 < ../../SukiSU_patch/hooks/tracepoint_hooks.patch || true
            ;;
          kprobe)
            echo "kprobe hook chosen: no static patch"
            ;;
        esac
    
    - name: Add KernelSU + SUSFS Config
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform"
        CFG=./common/arch/arm64/configs/gki_defconfig
        {
          echo "CONFIG_KSU=y"
          echo "CONFIG_KSU_KPROBES_HOOK=n"
          echo "CONFIG_KSU_SUSFS=y"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n"
          echo "CONFIG_TMPFS_XATTR=y"
          echo "CONFIG_TMPFS_POSIX_ACL=y"
        } >> "$CFG"
    
    - name: Add BBR v1 Support
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform"
        CFG=./common/arch/arm64/configs/gki_defconfig
        {
          echo "CONFIG_TCP_CONG_ADVANCED=y"
          echo "CONFIG_TCP_CONG_BBR=y"
          echo "CONFIG_NET_SCH_FQ=y"
          echo "CONFIG_NET_SCH_FQ_CODEL=y"
          echo "CONFIG_IP_ECN=y"
          echo "CONFIG_TCP_ECN=y"
          echo "CONFIG_IPV6_ECN=y"
          echo "CONFIG_IP_NF_TARGET_ECN=y"
        } >> "$CFG"
        sed -i -e '/CONFIG_NET_SCH_FQ_CODEL=/d' -e '$aCONFIG_NET_SCH_FQ_CODEL=y' "$CFG"
    
    - name: Add TTL Target Support
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform"
        CFG=./common/arch/arm64/configs/gki_defconfig
        {
          echo "CONFIG_IP_NF_TARGET_TTL=y"
          echo "CONFIG_IP6_NF_TARGET_HL=y"
          echo "CONFIG_IP6_NF_MATCH_HL=y"
        } >> "$CFG"
    
    - name: Add Build-based Configs
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform"
        CFG=./common/arch/arm64/configs/gki_defconfig
        {
          echo "CONFIG_LTO_CLANG_THIN=y"
          echo "CONFIG_LTO_CLANG=y"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y"
          echo "CONFIG_OPTIMIZE_INLINING=y"
          echo "CONFIG_DEBUG_KERNEL=n"
          echo "CONFIG_DYNAMIC_DEBUG=n"
          echo "CONFIG_DEBUG_INFO=n"
          echo "CONFIG_DAMON=n"
          echo "CONFIG_CRYPTO_SHA1_ARM64_CE=y"
          echo "CONFIG_VIRTIO_PCI_LEGACY=y"
          echo "CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y"
          echo "CONFIG_HEADERS_INSTALL=n"
          echo "CONFIG_PROC_MEM_ALWAYS_FORCE=n"
        } >> "$CFG"
        if [ "${{ inputs.KPM }}" = "true" ]; then
          echo "CONFIG_KPM=y" >> "$CFG"
        fi
        case "${{ inputs.HOOK }}" in
          kprobe)
            {
              echo "CONFIG_KPROBES=y"
              echo "CONFIG_KSU_KPROBES_HOOK=y"
            } >> "$CFG"
            ;;
          manual)
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CFG"
            ;;
          tracepoint)
            echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> "$CFG"
            ;;
        esac
    
    - name: Save Build Metadata
      shell: bash
      run: |
        set -e
        ART_DIR="$GITHUB_WORKSPACE/${CONFIG}/artifacts"
        mkdir -p "$ART_DIR"
        cd "$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common"
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        echo "${ANDROID_VER}-${VERSION}.${PATCHLEVEL}.${SUBLEVEL}" > "$ART_DIR/${CONFIG}.txt"
        echo "FULL_KERNEL_VERSION=${VERSION}.${PATCHLEVEL}.${SUBLEVEL}" >> "$GITHUB_ENV"
    
    - name: Customize Kernel Branding
      shell: bash
      run: |
        set -e
        CUSTOM_LOCALVERSION="-${ANDROID_VER}-OP-⚡Ultra⚡"
        echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"
    
    - name: Detect Clang
      shell: bash
      run: |
        set -e
        KP="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform"
        if [ -d "$KP/prebuilts/clang/host/linux-x86" ]; then
          CAND=$(ls -d "$KP"/prebuilts/clang/host/linux-x86/clang-r*/ | sort | tail -n1 | xargs basename)
          echo "CLANG_BIN_PATH=$KP/prebuilts/clang/host/linux-x86/$CAND/bin" >> "$GITHUB_ENV"
        elif [ -d "$KP/prebuilts-master/clang/host/linux-x86" ]; then
          CAND=$(ls -d "$KP"/prebuilts-master/clang/host/linux-x86/clang-r*/ | sort | tail -n1 | xargs basename)
          echo "CLANG_BIN_PATH=$KP/prebuilts-master/clang/host/linux-x86/$CAND/bin" >> "$GITHUB_ENV"
        fi
    
    - name: Build Kernel
      shell: bash
      run: |
        set -euo pipefail
        KERNEL_PATH="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform"
        COMMON_DIR="$KERNEL_PATH/common"
        OUT_DIR="$COMMON_DIR/out"
        cd "$COMMON_DIR"
        echo "=== Toolchain Detection ==="
        if [[ -n "${CLANG_BIN_PATH:-}" && -x "${CLANG_BIN_PATH}/clang" ]]; then
          export PATH="${CLANG_BIN_PATH}:$PATH"
          echo "Using prebuilt clang: $(command -v clang)"
        else
          command -v clang >/dev/null 2>&1 || { echo "ERROR: clang not found"; exit 1; }
          echo "Using system clang: $(command -v clang)"
        fi
        clang --version || true
        JOBS=$(nproc)
        export LLVM=1 ARCH=arm64 SUBARCH=arm64
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip
        export HOSTCC=clang HOSTCXX=clang++
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androidkernel-
        export KCFLAGS="-O2 -pipe -Wno-error -fno-stack-protector"
        export KCPPFLAGS="-DCONFIG_OPTIMIZE_INLINING"
        mkdir -p "$OUT_DIR"
        echo "=== Base defconfig ==="
        make -j"$JOBS" O="$OUT_DIR" gki_defconfig
        echo "=== olddefconfig sync ==="
        make O="$OUT_DIR" olddefconfig
        echo "=== Custom LOCALVERSION ==="
        scripts/config --file "$OUT_DIR/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
        scripts/config --file "$OUT_DIR/.config" -d LOCALVERSION_AUTO || true
        : > .scmversion
        make O="$OUT_DIR" olddefconfig
        echo "Effective LOCALVERSION: $(grep '^CONFIG_LOCALVERSION=' $OUT_DIR/.config || true)"
        BUILD_DAY_UTC=$(date -u +%Y-%m-%d)
        export SOURCE_DATE_EPOCH
        SOURCE_DATE_EPOCH=$(date -u -d "${BUILD_DAY_UTC} 00:00:00" +%s)
        export KBUILD_BUILD_TIMESTAMP
        KBUILD_BUILD_TIMESTAMP=$(date -u -d "@$SOURCE_DATE_EPOCH" '+%a %b %d 00:00:00 %Z %Y')
        export KBUILD_BUILD_USER=builder KBUILD_BUILD_HOST=github
        echo "=== Build start ==="
        START_TS=$(date +%s)
        make -j"$JOBS" O="$OUT_DIR"
        END_TS=$(date +%s)
        echo "Build time: $((END_TS-START_TS)) seconds"
        IMAGE="$OUT_DIR/arch/arm64/boot/Image"
        [ -f "$IMAGE" ] || { echo "ERROR: Kernel Image missing"; exit 1; }
        sha256sum "$IMAGE" | tee "$OUT_DIR/Image.sha256"
        cp "$OUT_DIR/.config" "$OUT_DIR/config.final"
        echo "kernelrelease: $(make -s O="$OUT_DIR" kernelrelease)"
    
    - name: Optional KPM Patch
      if: inputs.KPM == 'true'
      shell: bash
      run: |
        set -e
        BOOT_DIR="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common/out/arch/arm64/boot"
        cd "$BOOT_DIR"
        [ -f Image ] || { echo "Image missing for KPM patch"; exit 1; }
        curl -LO https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
        chmod +x patch_linux
        ./patch_linux
        if [ -f oImage ]; then
          mv Image Image.unpatched
          mv oImage Image
          sha256sum Image | tee Image.patched.sha256
        else
          echo "KPM patch failed (oImage absent)"; exit 1
        fi
    
    - name: Create Kernel ZIP
      shell: bash
      run: |
        set -e
        OUT_DIR="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common/out"
        IMG="$OUT_DIR/arch/arm64/boot/Image"
        test -f "$IMG"
        cp "$IMG" "$GITHUB_WORKSPACE/AnyKernel3/Image"
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        KPM_SUFFIX=""
        [ "${{ inputs.KPM }}" = "true" ] && KPM_SUFFIX="_KPM"
        SUSVER_SAFE="${SUSVER:-NA}"
        ZIP="AnyKernel3_${CONFIG}_${ANDROID_VER}-${KERNEL_VER}_Ultra_${KSUVER}_SUSFS_${SUSVER_SAFE}${KPM_SUFFIX}.zip"
        ART_DIR="$GITHUB_WORKSPACE/${CONFIG}/artifacts"
        mkdir -p "$ART_DIR"
        zip -rq "$ART_DIR/$ZIP" .
        (cd "$ART_DIR" && sha256sum "$ZIP" > "$ZIP.sha256")
        echo "ZIP_NAME=$ZIP" >> "$GITHUB_ENV"
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ inputs.model }}
        path: ${{ env.CONFIG }}/artifacts/*
