name: Build
permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    required: true
    type: string
    default: ""
  KSU_META:
    required: false
    type: string
    description: "susfs-main/⚡Ultra⚡"
    default: "susfs-main/⚡Ultra⚡"
  KPM:
    required: true
    type: boolean
    description: "Enable KPM？"
    default: true
  HOOK:
    required: false
    type: choice
    options:
    - kprobe
    - manual
    - tracepoint
    default: manual

runs:
  using: "composite"
  steps:
    - name: Setup Build System
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> "$GITHUB_ENV"
        df -h
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc \
        /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell \
        /usr/share/swift || true
        sudo docker image prune --all --force
        echo "Unused directories cleared"
        sudo apt-get purge -y aria2 ansible azure-cli shellcheck rpm xorriso zsync \
        esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable google-cloud-sdk \
        imagemagick libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional \
        kubectl mercurial apt-transport-https mono-complete libmysqlclient unixodbc-dev \
        yarn chrpath libssl-dev libxft-dev libfreetype6 libfreetype6-dev libfontconfig1 \
        libfontconfig1-dev snmp pollinate libpq-dev postgresql-client powershell ruby-full \
        sphinxsearch subversion mongodb-org microsoft-edge-stable || true
        sudo apt-get purge -y "$(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet' || true)" || true
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
        echo "Package cleanup complete"
        df -h

    - name: Install Dependencies
      shell: bash
      run: |
        sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
        sudo apt update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt install -yq --no-install-recommends \
          python3 git curl libelf-dev libelf1 lld \
          build-essential flex bison libssl-dev \
          libncurses-dev liblz4-tool zlib1g-dev \
          libxml2-utils rsync unzip dwarves 
              
    - name: Install Repo Tool
      shell: bash
      run: |
        mkdir -p ./git-repo
        curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
        chmod a+rx ./git-repo/repo
        echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> "$GITHUB_ENV"
        echo "CONFIG=${{ inputs.model }}" >> "$GITHUB_ENV"
    
    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        echo "Cloning AnyKernel3 and other dependencies..."
        ANYKERNEL_BRANCH="gki-2.0"
        if [[ -z "${{ inputs.susfs_branch }}" ]]; then
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        else
          SUSFS_BRANCH="${{ inputs.susfs_branch }}"
        fi
        echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
        echo "Using branch for SUSFS: $SUSFS_BRANCH"
        git clone https://github.com/Bouteillepleine/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        git clone https://gitlab.com/simonpunk/susfs4ksu.git
        cd susfs4ksu || exit 1
        if git rev-parse --verify "origin/$SUSFS_BRANCH" >/dev/null 2>&1 || git rev-parse --verify "$SUSFS_BRANCH" >/dev/null 2>&1 ; then
          git checkout "$SUSFS_BRANCH"
        else
          echo "Error: '$SUSFS_BRANCH' is neither a valid branch/tag nor a valid commit hash."
          exit 1
        fi
    
    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        echo "Creating folder for configuration: $CONFIG..."
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        echo "Initializing and syncing kernel source..."
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls ${{ inputs.manifest }} -o .repo/manifests/temp_manifest.xml
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        $REPO --version
        $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) --fail-fast
    
    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
        rm -f msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"
        df -h
    
    - name: Add SukiSU Ultra
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        META="${{ inputs.KSU_META }}"
        BRANCH_NAME="${META%%/*}"
        CUSTOM_TAG="${META#*/}"
        echo "Branch name: $BRANCH_NAME"
        echo "Custom version identifier: $CUSTOM_TAG"
        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/setup.sh" | bash -s "$BRANCH_NAME"
        cd ./KernelSU
        KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
          grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
        if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
          KSU_API_VERSION="3.1.7"
        fi
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
        GIT_HASH=$(git rev-parse --short HEAD)
        if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
          VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@$BRANCH_NAME"
        else
          VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$GIT_HASH]"
        fi
        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
        cat >> kernel/Makefile <<EOF
        define get_ksu_version_full
        $VERSION_FULL
        endef

        KSU_VERSION_API := $KSU_API_VERSION
        KSU_VERSION_FULL := $VERSION_FULL
        EOF
        KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
        echo "::group::KernelSU Version Block"
        grep -A12 "get_ksu_version_full" kernel/Makefile || true
        echo "::endgroup::"
    
    - name: Apply Patches SukiSU Ultra
      shell: bash
      run: |
        cd "$CONFIG"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        cd kernel_platform
        echo "Pulling susfs patches"
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
        cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
              
        cd ./common
        GKI_V="${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}"
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')
      
        if [ "$GKI_V" == "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
          echo "Fixing bugs caused by older C library support in kernel versions 5.15.0 to 5.15.123"
          curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
          patch -p1 < fix_5.15.legacy.patch
          echo "fix_5.15_patch completed"
        fi
        KERNEL_VERSION="${{ env.KERNEL_VERSION }}"
        file="${{ github.event.inputs.FILE }}"
        TRUSTY_EXISTS="false"
        if [[ "$KERNEL_VERSION" == "6.6" ]]; then
          if grep -q 'common-modules/trusty' "$GITHUB_WORKSPACE/.repo/manifests_fallback/${file}.xml"; then
            TRUSTY_EXISTS="true"
          fi
          echo "trusty_exists=$TRUSTY_EXISTS" >> $GITHUB_OUTPUT
      
          if [[ "$TRUSTY_EXISTS" == "false" && "$file" != "oneplus_pad_2_pro" && "$file" != "oneplus_pad_3" ]]; then
            echo "Fixing susfs errors caused by missing Trusty OS in some kernel version 6.6 devices"
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${KERNEL_VERSION}.patch
            sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${KERNEL_VERSION}.patch
          fi
        fi
        echo "Applying susfs patch"
        patch -p1 < 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
        echo "susfs_patch completed"

    - name: Apply SUSFS Patches
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        # Reuse already cloned susfs4ksu at ../susfs4ksu (from earlier step)
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${ANDROID_VER}-${KERNEL_VER}.patch ./common/ || true
        cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ 2>/dev/null || true
        cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ 2>/dev/null || true
        cd common
        if [ -f 50_add_susfs_in_gki-${ANDROID_VER}-${KERNEL_VER}.patch ]; then
          patch -p1 < 50_add_susfs_in_gki-${ANDROID_VER}-${KERNEL_VER}.patch || true
        else
          echo "SUSFS patch file missing; continuing."
        fi

    - name: Apply Hide Stuff Patch
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        if [ -f ../../SukiSU_patch/69_hide_stuff.patch ]; then
          cp ../../SukiSU_patch/69_hide_stuff.patch .
          patch -p1 -F 3 < 69_hide_stuff.patch || true
        fi

    - name: Apply HOOK
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        case "${{ inputs.HOOK }}" in
          manual)
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch . 2>/dev/null || true
            [ -f syscall_hooks.patch ] && patch -p1 -F 3 < syscall_hooks.patch || true
            ;;
          tracepoint)
            cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch . 2>/dev/null || true
            [ -f tracepoint_hooks.patch ] && patch -p1 -F 3 < tracepoint_hooks.patch || true
            ;;
          kprobe)
            echo "kprobe hook selected: no static patch applied."
            ;;
        esac

    - name: Append Configs (KSU/SUSFS/Features)
      shell: bash
      run: |
        DEF="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common/arch/arm64/configs/gki_defconfig"
        {
          echo "CONFIG_KSU=y"
          if [ "${{ inputs.KPM }}" = "true" ]; then
            echo "CONFIG_KPM=y"
          fi
          case "${{ inputs.HOOK }}" in
            kprobe)
              echo "CONFIG_KSU_SUSFS_SUS_SU=y"
              echo "CONFIG_KPROBES=y"
              echo "CONFIG_KSU_KPROBES_HOOK=y"
              ;;
            manual)
              echo "CONFIG_KSU_SUSFS_SUS_SU=n"
              echo "CONFIG_KSU_MANUAL_HOOK=y"
              ;;
            tracepoint)
              echo "CONFIG_KSU_SUSFS_SUS_SU=n"
              echo "CONFIG_KSU_TRACEPOINT_HOOK=y"
              ;;
          esac
          echo "CONFIG_KSU_SUSFS=y"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
          echo "CONFIG_TMPFS_XATTR=y"
          echo "CONFIG_TMPFS_POSIX_ACL=y"
          echo "CONFIG_TCP_CONG_ADVANCED=y"
          echo "CONFIG_TCP_CONG_BBR=y"
          echo "CONFIG_NET_SCH_FQ=y"
          echo "CONFIG_NET_SCH_FQ_CODEL=y"
          echo "CONFIG_IP_ECN=y"
          echo "CONFIG_TCP_ECN=y"
          echo "CONFIG_IPV6_ECN=y"
          echo "CONFIG_IP_NF_TARGET_ECN=y"
          echo "CONFIG_IP_NF_TARGET_TTL=y"
          echo "CONFIG_IP6_NF_TARGET_HL=y"
          echo "CONFIG_IP6_NF_MATCH_HL=y"
          echo "CONFIG_LTO_CLANG_THIN=y"
          echo "CONFIG_LTO_CLANG=y"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y"
          echo "CONFIG_OPTIMIZE_INLINING=y"
          echo "CONFIG_CRYPTO_SHA1_ARM64_CE=y"
          echo "CONFIG_VIRTIO_PCI_LEGACY=y"
          echo "CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y"
        } >> "$DEF"

    - name: Save Build Metadata
      shell: bash
      run: |
        ART_DIR="$GITHUB_WORKSPACE/${CONFIG}/artifacts"
        mkdir -p "$ART_DIR"
        cd "$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common"
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        echo "${ANDROID_VER}-$VERSION.$PATCHLEVEL.$SUBLEVEL" > "$ART_DIR/${{ inputs.model }}.txt"

    - name: Customize Kernel Branding
      shell: bash
      run: |
        CUSTOM_LOCALVERSION="-${ANDROID_VER}-OP-Ultra"
        echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"

    - name: Detect Clang Version
      shell: bash
      run: |
        KP="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform"
        DEF="$KP/common/arch/arm64/configs/gki_defconfig"
        CLANG_VERSION=""
        if grep -q '^CONFIG_CLANG_VERSION=' "$DEF"; then
          CLANG_VERSION=$(grep '^CONFIG_CLANG_VERSION=' "$DEF" | head -n1 | cut -d= -f2 | tr -d '"')
        else
          if [ -d "$KP/prebuilts/clang/host/linux-x86" ]; then
            CLANG_VERSION=$(ls -d "$KP"/prebuilts/clang/host/linux-x86/clang-r*/ | sort | tail -n1 | xargs basename)
          fi
        fi
        [ -z "$CLANG_VERSION" ] && CLANG_VERSION="clang"
        echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_ENV"
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          if [ -d "$base/clang/host/linux-x86/$CLANG_VERSION/bin" ]; then
            echo "CLANG_BIN_PATH=$base/clang/host/linux-x86/$CLANG_VERSION/bin" >> "$GITHUB_ENV"
            break
          fi
        done

    - name: Build Kernel
      shell: bash
      run: |
        set -e
        KP="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform"
        COMMON="$KP/common"
        OUT="$COMMON/out"
        cd "$COMMON"
        [ -n "${CLANG_BIN_PATH:-}" ] && export PATH="$CLANG_BIN_PATH:$PATH"
        command -v clang
        export LLVM=1 ARCH=arm64 SUBARCH=arm64
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip
        export HOSTCC=clang HOSTCXX=clang++
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androidkernel-
        mkdir -p "$OUT"
        make -j"$(nproc)" O="$OUT" gki_defconfig
        make O="$OUT" olddefconfig
        scripts/config --file "$OUT/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
        scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO || true
        : > .scmversion
        make O="$OUT" olddefconfig
        START=$(date +%s)
        make -j"$(nproc)" O="$OUT"
        END=$(date +%s)
        echo "Build took $((END-START))s"
        test -f "$OUT/arch/arm64/boot/Image"
        sha256sum "$OUT/arch/arm64/boot/Image" | tee "$OUT/Image.sha256"

    - name: Apply KPM patch_linux
      if: ${{ inputs.KPM == 'true' }}
      shell: bash
      run: |
        set -e
        BOOT_DIR="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common/out/arch/arm64/boot"
        cd "$BOOT_DIR"
        [ -f Image ] || { echo "Image missing for KPM patch"; exit 1; }
        curl -LO https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
        chmod +x patch_linux
        ./patch_linux
        if [ -f oImage ]; then
          mv Image Image.unpatched
          mv oImage Image
          sha256sum Image | tee Image.patched.sha256
        else
          echo "KPM patch failed (oImage absent)"; exit 1
        fi

    - name: Create Kernel ZIP
      shell: bash
      run: |
        OUT_DIR="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common/out"
        IMG="$OUT_DIR/arch/arm64/boot/Image"
        test -f "$IMG"
        cp "$IMG" "$GITHUB_WORKSPACE/AnyKernel3/Image"
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        KPM_SUFFIX=""
        [ "${{ inputs.KPM }}" = "true" ] && KPM_SUFFIX="_KPM"
        SUSVER_SAFE="${SUSVER:-NA}"
        ZIP="AnyKernel3_${{ inputs.model }}_${ANDROID_VER}-${KERNEL_VER}_Next_${KSUVER}_SUSFS_${SUSVER_SAFE}${KPM_SUFFIX}.zip"
        ART_DIR="$GITHUB_WORKSPACE/${CONFIG}/artifacts"
        mkdir -p "$ART_DIR"
        zip -r "$ART_DIR/$ZIP" ./*

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: |
          ${{ env.CONFIG }}/artifacts/*
