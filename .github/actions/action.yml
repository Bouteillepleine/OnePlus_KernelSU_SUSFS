name: Build
permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    required: true
    type: string
    default: ""
  KSU_META:
    description: 'SukiSU Ultra branch/custom version identifier (e.g., susfs-main/⚡Ultra⚡)'
    required: false
    type: string
    default: 'susfs-main/⚡Ultra⚡'
  KPM:
    description: 'Enable KPM?'
    required: true
    type: boolean
    default: true
  HOOK:
    description: 'Hook type'
    required: false
    type: choice
    default: manual
    options:
      - kprobe
      - manual
      - tracepoint

runs:
  using: composite
  steps:
    - name: Setup Build System
      shell: bash
      run: |
        set -e
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> "$GITHUB_ENV"
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
        sudo docker image prune --all --force || true
        sudo apt-get purge -y aria2 ansible azure-cli shellcheck rpm xorriso zsync esl-erlang firefox google-chrome-stable google-cloud-sdk imagemagick ant kubectl mercurial mono-complete yarn ruby-full subversion mongodb-org microsoft-edge-stable || true
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y

    - name: Install Dependencies
      shell: bash
      run: |
        set -e
        sudo apt update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
          git curl python3 libelf-dev libelf1 lld build-essential flex bison libssl-dev \
          libncurses-dev liblz4-tool zlib1g-dev libxml2-utils rsync unzip zip dwarves \
          bc device-tree-compiler

    - name: Install Repo Tool / Export Base Vars
      shell: bash
      run: |
        set -e
        mkdir -p ./git-repo
        curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
        chmod a+rx ./git-repo/repo
        echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> "$GITHUB_ENV"
        echo "CONFIG=${{ inputs.model }}" >> "$GITHUB_ENV"
        echo "KANDROID_VERSION=${{ inputs.android_version }}" >> "$GITHUB_ENV"
        echo "KERNEL_VERSION=${{ inputs.kernel_version }}" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3 + SukiSU Patch + SUSFS
      shell: bash
      run: |
        set -e
        echo "Cloning AnyKernel3..."
        git clone https://github.com/Bouteillepleine/AnyKernel3.git -b gki-2.0
        echo "Cloning SukiSU_patch..."
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        # Determine SUSFS branch: prefer input.susfs_branch when provided, else auto
        if [ -n "${{ inputs.susfs_branch }}" ]; then
          SUSFS_BRANCH="${{ inputs.susfs_branch }}"
        else
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        fi
        echo "Selected SUSFS branch: $SUSFS_BRANCH"
        if ! git ls-remote --heads https://gitlab.com/simonpunk/susfs4ksu.git "$SUSFS_BRANCH" | grep -q "$SUSFS_BRANCH"; then
          echo "ERROR: SUSFS branch '$SUSFS_BRANCH' not found upstream."
          exit 1
        fi
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
        # Record SUSFS short hash
        pushd susfs4ksu >/dev/null
        SUSVER=$(git rev-parse --short HEAD)
        popd >/dev/null
        echo "SUSVER=$SUSVER" >> "$GITHUB_ENV"

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        set -e
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls ${{ inputs.manifest }} -o .repo/manifests/temp_manifest.xml
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/${{ inputs.soc }} -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        $REPO sync -c --no-clone-bundle --no-tags --optimized-fetch -j"$(nproc --all)" --fail-fast

    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || true
        rm -f msm-kernel/android/abi_gki_protected_exports_* || true

    - name: Branding
      shell: bash
      run: |
        set -e
        : "${KANDROID_VERSION:?Missing KANDROID_VERSION}"
        CUSTOM_LOCALVERSION="-${KANDROID_VERSION}-OP-⚡Ultra⚡"
        echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"

    - name: Add SukiSU Ultra
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform"
        META="${{ inputs.KSU_META }}"
        BRANCH_NAME="${META%%/*}"
        CUSTOM_TAG="${META#*/}"
        echo "SukiSU meta: branch=$BRANCH_NAME tag=$CUSTOM_TAG"
        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/setup.sh" | bash -s "$BRANCH_NAME"
        cd KernelSU
        KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
          grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
        MIN_API="3.1.7"
        if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$MIN_API" "$KSU_API_VERSION" | sort -V | head -n1)" != "$MIN_API" ]]; then
          KSU_API_VERSION="$MIN_API"
        fi
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> "$GITHUB_ENV"
        GIT_HASH=$(git rev-parse --short HEAD)
        if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
          VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@$BRANCH_NAME"
        else
          VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$GIT_HASH]"
        fi
        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
        awk -v block="define get_ksu_version_full
        $VERSION_FULL
        endef
        
        KSU_VERSION_API := $KSU_API_VERSION
        KSU_VERSION_FULL := $VERSION_FULL
        " '
        /REPO_OWNER :=/ {print; print block; next}
        {print}
        ' kernel/Makefile > kernel/Makefile.new && mv kernel/Makefile.new kernel/Makefile
        # Fallback version calculation
        KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
        echo "KSUVER=$KSU_VERSION" >> "$GITHUB_ENV"

    - name: Apply SUSFS + Related Patches
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform/common"
        # Copy SUSFS patch resources
        cp "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches/50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch" .
        cp "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches/fs/"* ./fs/
        cp "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches/include/linux/"* ./include/linux/
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        if [ "${KANDROID_VERSION}-${KERNEL_VERSION}" = "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
          echo "Applying legacy libc compatibility fix for 5.15 < 123"
          curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
          patch -p1 < fix_5.15.legacy.patch
        fi
        if [[ "$KERNEL_VERSION" = "6.6" ]]; then
          # Optionally adapt patch if Trusty not present (best-effort heuristic—manifest path may differ)
          if ! grep -Rqs "common-modules/trusty" "$GITHUB_WORKSPACE/$CONFIG/.repo" 2>/dev/null; then
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch || true
            sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch || true
          fi
        fi
        echo "Applying SUSFS patch..."
        patch -p1 < 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch

    - name: Apply Hide Stuff Patch
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform/common"
        cp "$GITHUB_WORKSPACE/SukiSU_patch/69_hide_stuff.patch" .
        patch -p1 -F 3 < 69_hide_stuff.patch

    - name: Apply Hook Patch (Selected)
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform/common"
        case "${{ inputs.HOOK }}" in
          kprobe)
            echo "Using kprobe hook (no extra patch file needed if integrated)."
            ;;
          manual)
            cp "$GITHUB_WORKSPACE/SukiSU_patch/hooks/syscall_hooks.patch" .
            patch -p1 -F 3 < syscall_hooks.patch
            ;;
          tracepoint)
            cp "$GITHUB_WORKSPACE/SukiSU_patch/hooks/tracepoint_hooks.patch" .
            patch -p1 -F 3 < tracepoint_hooks.patch
            ;;
        esac

    - name: Append Kernel Config Options
      shell: bash
      run: |
        set -e
        CFG="$CONFIG/kernel_platform/common/arch/arm64/configs/gki_defconfig"
        {
          echo "# --- SukiSU / SUSFS additions (deduplicated block) ---"
          echo "CONFIG_KSU=y"
          if [ "${{ inputs.KPM }}" = "true" ]; then
            echo "CONFIG_KPM=y"
          fi
          case "${{ inputs.HOOK }}" in
            kprobe)
              echo "CONFIG_KSU_SUSFS_SUS_SU=y"
              echo "CONFIG_KPROBES=y"
              echo "CONFIG_KSU_KPROBES_HOOK=y"
              ;;
            manual)
              echo "CONFIG_KSU_SUSFS_SUS_SU=n"
              echo "CONFIG_KSU_MANUAL_HOOK=y"
              ;;
            tracepoint)
              echo "CONFIG_KSU_SUSFS_SUS_SU=n"
              echo "CONFIG_KSU_TRACEPOINT_HOOK=y"
              ;;
          esac
          echo "CONFIG_KSU_SUSFS=y"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
          echo "CONFIG_KSU_SUSFS_ENABLE_Log=y"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
          echo "CONFIG_TMPFS_XATTR=y"
          echo "CONFIG_TMPFS_POSIX_ACL=y"
          echo "CONFIG_TCP_CONG_ADVANCED=y"
          echo "CONFIG_TCP_CONG_BBR=y"
          echo "CONFIG_NET_SCH_FQ=y"
          echo "CONFIG_NET_SCH_FQ_CODEL=y"
          echo "CONFIG_IP_NF_TARGET_TTL=y"
          echo "CONFIG_IP6_NF_TARGET_HL=y"
          echo "CONFIG_IP6_NF_MATCH_HL=y"
          echo "CONFIG_LTO_CLANG_THIN=y"
          echo "CONFIG_LTO_CLANG=y"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y"
          echo "CONFIG_OPTIMIZE_INLINING=y"
          echo "CONFIG_CRYPTO_SHA1_ARM64_CE=y"
          echo "CONFIG_VIRTIO_PCI_LEGACY=y"
          echo "CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y"
        } >> "$CFG"

    - name: Disable OnePlus Kernel KUnit Modules (Specific)
      if: ${{ inputs.android_version == 'android14' && inputs.kernel_version == '6.1' }}
      shell: bash
      run: |
        set -e
        CFG="$CONFIG/kernel_platform/common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_REGMAP_KUNIT=m/CONFIG_REGMAP_KUNIT=n/g' "$CFG"
        sed -i 's/CONFIG_INPUT_KUNIT_TEST=m/CONFIG_INPUT_KUNIT_TEST=n/g' "$CFG"
        sed -i 's/CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=m/CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=n/g' "$CFG"
        sed -i 's/CONFIG_SND_SOC_UTILS_KUNIT_TEST=m/CONFIG_SND_SOCUTILS_KUNIT_TEST=n/g' "$CFG"
        sed -i 's/CONFIG_HID_KUNIT_TEST=m/CONFIG_HID_KUNIT_TEST=n/g' "$CFG"
        sed -i 's/CONFIG_RTC_LIB_KUNIT_TEST=m/CONFIG_RTC_LIB_KUNIT_TEST=n/g' "$CFG"
        sed -i 's/CONFIG_CLK_KUNIT_TEST=m/CONFIG_CLK_KUNIT_TEST=n/g' "$CFG"
        sed -i 's/CONFIG_CLK_GATE_KUNIT_TEST=m/CONFIG_CLK_GATE_KUNIT_TEST=n/g' "$CFG"
        sed -i 's/CONFIG_IIO_FORMAT_KUNIT_TEST=m/CONFIG_IIO_FORMAT_KUNIT_TEST=n/g' "$CFG"
        sed -i 's/CONFIG_EXT4_KUNIT_TESTS=m/CONFIG_EXT4_KUNIT_TESTS=n/g' "$CFG"
        sed -i 's/CONFIG_FAT_KUNIT_TEST=m/CONFIG_FAT_KUNIT_TEST=n/g' "$CFG"

    - name: Save Build Metadata
      shell: bash
      run: |
        set -e
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        ART="$CONFIG_DIR/artifacts"
        mkdir -p "$ART"
        cd "$CONFIG_DIR/kernel_platform/common"
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        echo "$KANDROID_VERSION-$FULL_VERSION" > "$ART/${{ inputs.model }}.txt"

    - name: Detect Clang
      shell: bash
      run: |
        set -e
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        CLANG_FOUND=false
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          [ -d "$base/clang/host/linux-x86" ] || continue
          latest=$(ls -d "$base"/clang/host/linux-x86/clang-r*/ 2>/dev/null | sort -V | tail -n1 || true)
            if [ -n "$latest" ] && [ -x "$latest/bin/clang" ]; then
              CLANG_BIN="$latest/bin"
              CLANG_FOUND=true
            fi
        done
        if ! $CLANG_FOUND && command -v clang >/dev/null 2>&1; then
          CLANG_BIN="$(dirname "$(command -v clang)")"
          CLANG_FOUND=true
        fi
        $CLANG_FOUND || { echo "No clang toolchain found"; exit 1; }
        echo "CLANG_BIN_PATH=$CLANG_BIN" >> "$GITHUB_ENV"
        CLANG_VERSION="$("$CLANG_BIN/clang" --version | head -n1)"
        echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_ENV"

    - name: Build Kernel
      shell: bash
      run: |
        set -e
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COMMON="$KERNEL_PATH/common"
        cd "$COMMON"
        export PATH="${CLANG_BIN_PATH:-$PATH}:$PATH"
        export LLVM=1 LLVM_IAS=1 ARCH=arm64 SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androideabi-
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++
        RUSTC_DIR="$KERNEL_PATH/prebuilts/rust/linux-x86/1.73.0b/bin"
        MAKE_ARGS="LLVM=1 LLVM_IAS=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_COMPAT=arm-linux-androideabi- LD=ld.lld HOSTLD=ld.lld"
        [ -x "$RUSTC_DIR/rustc" ] && MAKE_ARGS+=" RUSTC=$RUSTC_DIR/rustc"
        mkdir -p out
        make $MAKE_ARGS O=out gki_defconfig
        if [ -n "${CUSTOM_LOCALVERSION:-}" ]; then
          scripts/config --file out/.config --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
          scripts/config --file out/.config -d LOCALVERSION_AUTO || true
          make $MAKE_ARGS O=out olddefconfig
        fi
        export KCFLAGS="-Wno-error -O2 -fno-stack-protector"
        make -j"$(nproc --all)" $MAKE_ARGS O=out
        IMG="out/arch/arm64/boot/Image"
        [ -f "$IMG" ] || { echo "Kernel Image missing"; exit 1; }
        sha256sum "$IMG" | tee out/Image.sha256
        cp "$IMG" "$GITHUB_WORKSPACE/AnyKernel3/Image"

    - name: KPM patch_linux
      if: ${{ inputs.KPM }}
      shell: bash
      run: |
        set -e
        OUT="$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common/out"
        FINAL="$OUT/Final-Image"
        mkdir -p "$FINAL"
        cp "$OUT/arch/arm64/boot/Image" "$FINAL/Image"
        cd "$FINAL"
        curl -LO https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
        chmod +x patch_linux
        if ./patch_linux; then
          [ -f oImage ] && mv oImage Image
          cp Image "$GITHUB_WORKSPACE/AnyKernel3/Image"
          echo "KPM patch applied."
        else
          echo "KPM patch failed; continuing with original Image."
        fi

    - name: Create Flashable ZIP
      shell: bash
      run: |
        set -e
        ART="$GITHUB_WORKSPACE/$CONFIG/artifacts"
        mkdir -p "$ART"
        : "${SUSVER:=unknown}"
        : "${KSUVER:=unknown}"
        ZIP="AnyKernel3_${{ inputs.model }}_${KANDROID_VERSION}-${KERNEL_VERSION}_SukiSU_${KSUVER}_SUSFS_${SUSVER}.zip"
        (cd "$GITHUB_WORKSPACE/AnyKernel3"; zip -r "$ART/$ZIP" .)

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: ${{ env.CONFIG }}/artifacts/*
