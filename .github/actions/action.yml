name: Build
permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    required: true
    type: string
    default: ""
  KSU_META:
    type: string
    required: false
    default: "susfs-main/⚡Ultra⚡"
  HOOK:
    type: string
    required: true
    default: "manual"
    description: "Hook method to use. Valid options: 'kprobe', 'manual', 'tracepoint'"
  KPM:
    type: boolean
    description: "Enable Kernel Module (KPM)?"
    required: true
    default: true
  SCHED:
    type: boolean
    description: "Add Fengchi Driver?"
    required: true
    default: false
  SUSFS_CI:
    type: string
    required: true
    default: true
  github_token:
    description: 'GitHub token for repository access'
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup Build System
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> "$GITHUB_ENV"
        df -h
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc \
        /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell \
        /usr/share/swift || true
        sudo docker image prune --all --force
        echo "Unused directories cleared"
        sudo apt-get purge -y aria2 ansible azure-cli shellcheck rpm xorriso zsync \
        esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable google-cloud-sdk \
        imagemagick libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional \
        kubectl mercurial apt-transport-https mono-complete libmysqlclient unixodbc-dev \
        yarn chrpath libssl-dev libxft-dev libfreetype6 libfreetype6-dev libfontconfig1 \
        libfontconfig1-dev snmp pollinate libpq-dev postgresql-client powershell ruby-full \
        sphinxsearch subversion mongodb-org microsoft-edge-stable || true
        sudo apt-get purge -y "$(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet' || true)" || true
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
        echo "Package cleanup complete"
        df -h

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "0+builder"
        git config --global user.email "0+builder@qq.com"

    - name: Install Dependencies
      shell: bash
      run: |
        sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
        sudo apt update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt install -yq --no-install-recommends \
          python3 git curl libelf-dev libelf1 lld \
          build-essential flex bison libssl-dev \
          libncurses-dev liblz4-tool zlib1g-dev \
          libxml2-utils rsync unzip python3 python-is-python3

    - name: Install Repo Tool
      shell: bash
      run: |
        mkdir -p ./git-repo
        curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
        chmod a+rx ./git-repo/repo
        echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> "$GITHUB_ENV"
        echo "CONFIG=${{ inputs.model }}" >> "$GITHUB_ENV"
        echo "KANDROID_VERSION=${{ inputs.android_version }}" >> "$GITHUB_ENV"
        echo "KERNEL_VERSION=${{ inputs.kernel_version }}" >> "$GITHUB_ENV"
        echo "CPU=${{ inputs.soc }}" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        echo "Cloning AnyKernel3 and other dependencies..."
        ANYKERNEL_BRANCH="gki-2.0"
        if [[ -z "${{ inputs.susfs_branch }}" ]]; then
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        else
          SUSFS_BRANCH="${{ inputs.susfs_branch }}"
        fi
        echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
        echo "Using branch for SUSFS: $SUSFS_BRANCH"
        git clone https://github.com/Bouteillepleine/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone https://github.com/TheWildJames/kernel_patches.git
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        echo "SUSVER=v1.5.2+" >> $GITHUB_ENV

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        echo "Creating folder for configuration: $CONFIG..."
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        echo "Initializing and syncing kernel source..."
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls ${{ inputs.manifest }} -o .repo/manifests/temp_manifest.xml
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        $REPO --version
        $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) --fail-fast

    - name: Set Android Version
      shell: bash
      run: |
        CONFIG_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG }}"
        cd "$CONFIG_DIR/kernel_platform/common"
        CONFIG_FILES=("build.config.common" "build.config.constants")
        BRANCH_LINE=""
        for file in "${CONFIG_FILES[@]}"; do
          if [ -f "$file" ]; then
            line=$(grep '^[[:space:]]*BRANCH=' "$file" | head -n1 || true)
            if [ -n "$line" ]; then
              BRANCH_LINE="$line"
              echo "Found BRANCH in: $file"
              break
            fi
          fi
        done
        if [ -z "$BRANCH_LINE" ]; then
          echo "Error: No BRANCH= found in any of: ${CONFIG_FILES[*]}"
          exit 1
        fi
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        if [ -z "$ANDROID_VERSION" ]; then
          echo "Error: Could not extract 'androidXX' from BRANCH='$BRANCH_VALUE'"
          exit 1
        fi
        echo "ANDROID_VER=$ANDROID_VERSION" >> $GITHUB_ENV

    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
        rm -f msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"
        df -h

    - name: Add SukiSU Ultra
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        META="${{ inputs.KSU_META }}"
        BRANCH_NAME="${META%%/*}"
        CUSTOM_TAG="${META#*/}"
        echo "Branch Name: $BRANCH_NAME"
        echo "Custom Version Identifier: $CUSTOM_TAG"
        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH_NAME"
        cd ./KernelSU
        KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
          grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
        if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
          KSU_API_VERSION="3.1.7"
        fi
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
        GIT_HASH=$(git rev-parse --short HEAD)
        echo "GIT_HASH=$GIT_HASH"
        if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
          VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@$BRANCH_NAME"
        else
          VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$GIT_HASH]"
        fi
        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
        VERSION_DEFINITIONS=$(cat <<EOF
        define get_ksu_version_full
        $VERSION_FULL
        endef
        KSU_VERSION_API := $KSU_API_VERSION
        KSU_VERSION_FULL := $VERSION_FULL
        EOF
        )
        awk -v def="$VERSION_DEFINITIONS" '
          /REPO_OWNER :=/ {print; print def; inserted=1; next}
          1
          END {if (!inserted) print def}
        ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile
        KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
        echo "::group::Preview of version information in the final Makefile and partial debug results"
        grep -A10 "REPO_OWNER" kernel/Makefile
        grep "KSU_VERSION_FULL" kernel/Makefile
        echo "::endgroup::"
        git submodule update --init --recursive

    - name: Apply Patches SukiSU Ultra
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG"
        echo "Cloning susfs4ksu repository..."
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "${{ inputs.susfs_branch }}" ../susfs4ksu
        echo "Listing susfs4ksu kernel_patches directory for debugging:"
        ls -la ../susfs4ksu/kernel_patches/ || echo "kernel_patches directory not found"
        cd kernel_platform
        echo "Fetching susfs patches"
        PATCH_FILE="../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch"
        if [ -f "$PATCH_FILE" ]; then
          cp "$PATCH_FILE" ./common/
        else
          echo "Patch file $PATCH_FILE not found, skipping copy"
        fi
        cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ || echo "No files found in ../susfs4ksu/kernel_patches/fs/, skipping"
        cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ || echo "No files found in ../susfs4ksu/kernel_patches/include/linux/, skipping"
        cd ./common
        GKI_V="${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')
        if [ "$GKI_V" = "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
          echo "Applying fix for kernel versions 5.15.0 to 5.15.123 (legacy C library bugs)"
          curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
          patch -p1 < fix_5.15.legacy.patch || echo "Failed to apply fix_5.15.legacy.patch, continuing"
          echo "fix_5.15_patch completed"
        fi
        if [ "${{ inputs.kernel_version }}" = "6.6" ]; then
          TRUSTY_EXISTS="false"
          if [ -n "${{ inputs.manifest }}" ] && grep -q 'common-modules/trusty' "$GITHUB_WORKSPACE/.repo/manifests/${{ inputs.manifest }}"; then
            TRUSTY_EXISTS="true"
          fi
          echo "trusty_exists=$TRUSTY_EXISTS" >> $GITHUB_OUTPUT
          if [ "$TRUSTY_EXISTS" = "false" ] && [ "${{ inputs.model }}" != "OP-PAD-2" ] && [ "${{ inputs.model }}" != "OP-PAD-3" ]; then
            echo "Fixing susfs errors for kernel 6.6 models missing Trusty OS"
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "50_add_susfs_in_gki-${GKI_V}.patch" || echo "Failed to modify patch file, continuing"
            sed -i '/#include <trace\/hooks\/fs.h>/d' "50_add_susfs_in_gki-${GKI_V}.patch" || echo "Failed to modify patch file, continuing"
          fi
        fi
        if [ -f "50_add_susfs_in_gki-${GKI_V}.patch" ]; then
          echo "Applying susfs patch"
          patch -p1 < "50_add_susfs_in_gki-${GKI_V}.patch" || echo "Failed to apply susfs patch, continuing"
          echo "susfs_patch completed"
        else
          echo "susfs patch not found, skipping"
        fi
        if [ -f fs/susfs.c ]; then
          echo "Applying susfs.c patch"
          sed -i "s/ksu_susfs_version_full()/get_ksu_version_full()/g" fs/susfs.c
          echo "susfs.c patch completed"
        else
          echo "susfs.c not found, skipping"
        fi
        git add -A
        git commit -m "Add SukiSU Ultra Patches" || echo "No changes to commit"

    - name: Validate HOOK Input
      shell: bash
      run: |
        case "${{ inputs.HOOK }}" in
          kprobe|manual|tracepoint)
            echo "Valid HOOK value: ${{ inputs.HOOK }}"
            ;;
          *)
            echo "Error: Invalid HOOK value '${{ inputs.HOOK }}'. Must be one of: kprobe, manual, tracepoint"
            exit 1
            ;;
        esac

    - name: Download Latest SUSFS Module from CI
      if: ${{ inputs.SUSFS_CI == 'CI' }}
      continue-on-error: true
      shell: bash
      run: |
        LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ inputs.github_token }}" \
          "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
          jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)
        if [ -z "$LATEST_RUN_ID" ]; then
          echo "No successful run found for branch v1.5.2+"
        else
          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ inputs.github_token }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url')
          if [ -n "$ARTIFACT_URL" ]; then
            curl -L -H "Authorization: Bearer ${{ inputs.github_token }}" -o ksu_module_susfs_1.5.2+_CI.zip "$ARTIFACT_URL"
            cp ksu_module_susfs_1.5.2+_CI.zip "$GITHUB_WORKSPACE/AnyKernel3/"
          else
            echo "Failed to fetch artifact URL"
          fi
        fi

    - name: Save Build Metadata
      shell: bash
      id: save_metadata
      run: |
        CONFIG_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG }}"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        
        cd "$CONFIG_DIR/kernel_platform/common"
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        
        echo "Kernel Version: ${{ env.ANDROID_VER }}-$FULL_VERSION"
        
        cd "$ARTIFACTS_DIR"
        echo "${{ env.ANDROID_VER }}-$FULL_VERSION" > ${{ inputs.model }}.txt

    - name: Create Kernel ZIP
      id: create_zip
      shell: bash
      run: |
        CONFIG_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG }}"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
          cp "$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/bins/"* ./tools/
          patch -F 3 < "$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/ak3_hmbird_patch.patch"
        fi
        ZIP_NAME="AnyKernel3_${{ inputs.model }}_${{ inputs.android_version }}-${{ inputs.kernel_version }}_SukiSU_${{ env.KSUVER }}_SUSFS_${{ env.SUSVER }}.zip"
        echo "Creating zip file $ZIP_NAME in $ARTIFACTS_DIR..."
        zip -r "$ARTIFACTS_DIR/$ZIP_NAME" ./*

    - name: Upload Artifacts
      if: success() && steps.create_zip.conclusion == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: |
          ${{ env.CONFIG }}/artifacts/*
