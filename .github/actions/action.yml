name: Build
permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    required: true
    type: string
    default: ""
  KSU_META:
    description: 'SukiSU Ultra branch/custom version identifier (e.g., susfs-main/⚡Ultra⚡)'
    required: false
    type: string
    default: 'susfs-main/⚡Ultra⚡'
  KPM:
    description: 'Enable KPM?'
    required: true
    type: boolean
    default: true
  HOOK:
    description: 'Hook type'
    required: false
    type: choice
    default: manual
    options:
      - kprobe
      - manual
      - tracepoint

runs:
  using: composite
  steps:
    - name: Setup Build System
      shell: bash
      run: |
        set -e
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> "$GITHUB_ENV"
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
        sudo docker image prune --all --force || true
        sudo apt-get purge -y aria2 ansible azure-cli shellcheck rpm xorriso zsync esl-erlang firefox google-chrome-stable google-cloud-sdk imagemagick ant kubectl mercurial mono-complete yarn ruby-full subversion mongodb-org microsoft-edge-stable || true
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y

    - name: Install Dependencies
      shell: bash
      run: |
        set -e
        sudo apt update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
          git curl python3 libelf-dev libelf1 lld build-essential flex bison libssl-dev \
          libncurses-dev liblz4-tool zlib1g-dev libxml2-utils rsync unzip dwarves zip

    - name: Install Repo Tool
      shell: bash
      run: |
        mkdir -p ./git-repo
        curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
        chmod a+rx ./git-repo/repo
        echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> "$GITHUB_ENV"
        echo "CONFIG=${{ inputs.model }}" >> "$GITHUB_ENV"
        echo "KANDROID_VERSION=${{ inputs.android_version }}" >> "$GITHUB_ENV"
        echo "KERNEL_VERSION=${{ inputs.kernel_version }}" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        set -e
        echo "Cloning AnyKernel3 and other dependencies..."
        ANYKERNEL_BRANCH="gki-2.0"
        SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
        echo "Using branch for SUSFS: $SUSFS_BRANCH"
        git clone https://github.com/Bouteillepleine/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
        git clone https://github.com/ShirkNeko/SukiSU_patch.git

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        set -e
        echo "Creating folder for configuration: $CONFIG..."
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        echo "Initializing and syncing kernel source..."
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls ${{ inputs.manifest }} -o .repo/manifests/temp_manifest.xml
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/${{ inputs.soc }} -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        $REPO --version
        $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j"$(nproc --all)" --fail-fast

    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
        rm -f msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"
        df -h

    - name: Derive Kernel / Manifest Metadata
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform/common"
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          MANIFEST_BASENAME="temp_manifest.xml"
        else
          MANIFEST_BASENAME="${{ inputs.manifest }}"
        fi
        MANIFEST_PATH="$GITHUB_WORKSPACE/$CONFIG/.repo/manifests/$MANIFEST_BASENAME"
        echo "MANIFEST_PATH=$MANIFEST_PATH" >> "$GITHUB_ENV"
        V=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        P=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        S=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL="$V.$P.$S"
        echo "TKERNEL_VERSION=$FULL" >> "$GITHUB_ENV"
        echo "Full kernel version: $FULL"

    - name: Branding
      shell: bash
      run: |
        set -e
        CUSTOM_LOCALVERSION="-${KANDROID_VERSION}-OP-⚡Ultra⚡"
        echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"

    - name: Add SukiSU Ultra
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform"
        META="${{ inputs.KSU_META }}"
        BRANCH_NAME="${META%%/*}"
        CUSTOM_TAG="${META#*/}"
        echo "Adding SukiSU Ultra branch=$BRANCH_NAME tag=$CUSTOM_TAG"
        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/setup.sh" | bash -s "$BRANCH_NAME"
        cd KernelSU
        KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
        if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
          KSU_API_VERSION="3.1.7"
        fi
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
        GIT_HASH=$(git rev-parse --short HEAD)
        if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
          VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@$BRANCH_NAME"
        else
          VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$GIT_HASH]"
        fi
        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
        {
          echo "define get_ksu_version_full"
          echo "$VERSION_FULL"
          echo "endef"
          echo "KSU_VERSION_API := $KSU_API_VERSION"
          echo "KSU_VERSION_FULL := $VERSION_FULL"
        } >> kernel/Makefile
        KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 700) + 10700)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

    - name: Apply Patches SukiSU Ultra
      shell: bash
      run: |
        set -e
        cd "$CONFIG"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        cd kernel_platform
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
        cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        cd common
        SUSVER=$(grep -m1 -E 'SUFS|susfs' 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch | sed -n 's/.*SUSFS *v\?\([0-9][^ ]*\).*/\1/p' | head -n1)
        [[ -z "$SUSVER" ]] && SUSVER=unknown
        echo "SUSVER=$SUSVER" >> "$GITHUB_ENV"
        GKI_V="${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}"
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')
        if [[ "$GKI_V" == "android13-5.15" && "$SUBLEVEL" -lt 123 ]]; then
          curl -Lo fix_5.15.legacy.patch https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
          patch -p1 < fix_5.15.legacy.patch
        fi
        TKERNEL_VERSION="${{ env.TKERNEL_VERSION }}"
        MANIFEST_PATH="${{ env.MANIFEST_PATH }}"
        if [[ "${{ env.KERNEL_VERSION }}" == "6.6" ]]; then
          TRUSTY_EXISTS=false
          if [[ -f "$MANIFEST_PATH" ]] && grep -q 'common-modules/trusty' "$MANIFEST_PATH"; then
            TRUSTY_EXISTS=true
          fi
          echo "TRUSTY_EXISTS=$TRUSTY_EXISTS"
          if ! $TRUSTY_EXISTS; then
            if [[ "$(printf '%s\n' "$TKERNEL_VERSION" "6.6.30" | sort -V | head -n1)" == "$TKERNEL_VERSION" ]]; then
              sed -i 's/-32,12 +32,38/-32,11 +32,37/' 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
              sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            fi
          fi
        fi
        echo "Applying susfs patch..."
        if patch --dry-run -p1 < 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch; then
          patch -p1 < 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch
          echo "susfs patch applied"
        else
          echo "WARNING: susfs patch dry-run failed; continuing"
        fi

    - name: Apply Hide Stuff Patches
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform/common"
        cp ../../SukiSU_patch/69_hide_stuff.patch ./
        patch -p1 -F 3 < 69_hide_stuff.patch /

    - name: Apply HOOK
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform/common"
        case "${{ inputs.HOOK }}" in
          kprobe) echo "kprobe hook selected";;
          manual)
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
            ;;
          tracepoint)
            cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch ./
            patch -p1 -F 3 < tracepoint_hooks.patch
            ;;
        esac

    - name: Convert HMBIRD_OGKI to HMBIRD_GKI (6.6 only)
      if: ${{ inputs.kernel_version == '6.6' }}
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform/common"
        curl -fL -o hmbird_patch.patch https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/hmbird_patch.patch
        grep -q 'hmbird_patch.o' drivers/Makefile || echo 'obj-y += hmbird_patch.o' >> drivers/Makefile
        patch -p1 -F 3 < hmbird_patch.patch || echo "hmbird patch failed (non-fatal)"

    - name: Add kernelSU and SUSFS Configuration Settings
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform"
        DEF=./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU=y" >> "$DEF"
        if [[ "${{ inputs.KPM }}" == "true" ]]; then
          echo "CONFIG_KPM=y" >> "$DEF"
        fi
        case "${{ inputs.HOOK }}" in
          kprobe)
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$DEF"
            echo "CONFIG_KPROBES=y" >> "$DEF"
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> "$DEF"
            ;;
          manual)
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$DEF"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$DEF"
            ;;
          tracepoint)
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$DEF"
            echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> "$DEF"
            ;;
        esac
        cat >> "$DEF" <<'EOF'
        CONFIG_KSU_SUSFS=y
        CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_PATH=y
        CONFIG_KSU_SUSFS_SUS_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_KSTAT=y
        CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
        CONFIG_KSU_SUSFS_TRY_UMOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SPOOF_UNAME=y
        CONFIG_KSU_SUSFS_ENABLE_LOG=y
        CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
        CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
        CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
        CONFIG_TMPFS_XATTR=y
        CONFIG_TMPFS_POSIX_ACL=y
        EOF

    - name: Add BBR v1 Support
      shell: bash
      run: |
        set -e
        DEF="$CONFIG/kernel_platform/common/arch/arm64/configs/gki_defconfig"
        cat >> "$DEF" <<'EOF'
        CONFIG_TCP_CONG_ADVANCED=y
        CONFIG_TCP_CONG_BBR=y
        CONFIG_TCP_CONG_BIC=n
        CONFIG_TCP_CONG_WESTWOOD=n
        CONFIG_TCP_CONG_HTCP=n
        CONFIG_NET_SCH_FQ=y
        CONFIG_NET_SCH_FQ_CODEL=y
        EOF
        sed -i -e '/CONFIG_NET_SCH_FQ_CODEL=/d' -e '$aCONFIG_NET_SCH_FQ_CODEL=y' "$DEF"

    - name: Add TTL Target Support
      shell: bash
      run: |
        set -e
        DEF="$CONFIG/kernel_platform/common/arch/arm64/configs/gki_defconfig"
        cat >> "$DEF" <<'EOF'
        CONFIG_IP_NF_TARGET_TTL=y
        CONFIG_IP6_NF_TARGET_HL=y
        CONFIG_IP6_NF_MATCH_HL=y
        EOF

    - name: Add Build based configs
      shell: bash
      run: |
        set -e
        DEF="$CONFIG/kernel_platform/common/arch/arm64/configs/gki_defconfig"
        cat >> "$DEF" <<'EOF'
        CONFIG_LTO_CLANG_THIN=y
        CONFIG_LTO_CLANG=y
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n
        CONFIG_OPTIMIZE_INLINING=y
        CONFIG_DEBUG_KERNEL=n
        CONFIG_DYNAMIC_DEBUG=n
        CONFIG_DEBUG_INFO=n
        CONFIG_DAMON=n
        CONFIG_CRYPTO_SHA1_ARM64_CE=y
        CONFIG_VIRTIO_PCI_LEGACY=y
        CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y
        CONFIG_HEADERS_INSTALL=n
        CONFIG_PROC_MEM_ALWAYS_FORCE=n
        EOF

    - name: Disable OnePlus Kernel Module
      shell: bash
      run: |
        set -e
        if [[ "${{ inputs.android_version }}" == "android14" && "${{ inputs.kernel_version }}" == "6.1" ]]; then
          DEF="$CONFIG/kernel_platform/common/arch/arm64/configs/gki_defconfig"
          for k in CONFIG_REGMAP_KUNIT CONFIG_INPUT_KUNIT_TEST CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST CONFIG_SND_SOC_UTILS_KUNIT_TEST CONFIG_HID_KUNIT_TEST CONFIG_RTC_LIB_KUNIT_TEST CONFIG_CLK_KUNIT_TEST CONFIG_CLK_GATE_KUNIT_TEST CONFIG_IIO_FORMAT_KUNIT_TEST CONFIG_EXT4_KUNIT_TESTS CONFIG_FAT_KUNIT_TEST; do
            sed -i "s/${k}=m/${k}=n/g" "$DEF" || true
          done
        fi

    - name: Add sched_ext
      if: ${{ inputs.kernel_version == '6.6' }}
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform"
        git clone https://github.com/HanKuCha/sched_ext.git
        cp -r sched_ext/* ./common/kernel/sched/
        rm -rf sched_ext/.git

    - name: Save Build Metadata
      shell: bash
      run: |
        set -e
        CONFIG_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG }}"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        cd "$CONFIG_DIR/kernel_platform/common"
        BRANCH_LINE=$( (grep -m1 '^[[:space:]]*BRANCH=' build.config.common || grep -m1 '^[[:space:]]*BRANCH=' build.config.constants || true) )
        [[ -z "$BRANCH_LINE" ]] && { echo "BRANCH not found"; exit 1; }
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        echo "ANDROID_VER=$ANDROID_VERSION" >> "$GITHUB_ENV"
        echo "$ANDROID_VERSION-$FULL_VERSION" > "$ARTIFACTS_DIR/${{ inputs.model }}.txt"

    - name: Detect Clang
      shell: bash
      run: |
        set -e
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        CLANG_FOUND=false
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          if [ -d "$base/clang/host/linux-x86" ]; then
            cand=$(ls -d "$base"/clang/host/linux-x86/clang-r*/ 2>/dev/null | sort -V | tail -n1 | xargs basename)
            [[ -z "$cand" ]] && continue
            CLANG_PATH="$base/clang/host/linux-x86/$cand/bin"
            if [[ -x "$CLANG_PATH/clang" ]]; then
              CLANG_VERSION=$("$CLANG_PATH/clang" --version | head -n1 | awk '{print $3}')
              echo "Found Clang: $CLANG_PATH (version $CLANG_VERSION)"
              echo "CLANG_BIN_PATH=$CLANG_PATH" >> "$GITHUB_ENV"
              echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_ENV"
              CLANG_FOUND=true
              break
            fi
          fi
        done
        $CLANG_FOUND || { echo "Clang not found"; exit 1; }

    - name: Build Kernel
      shell: bash
      run: |
        set -euo pipefail
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COM="$KP/common"
        OUT="$COM/out"
        cd "$COM"
        [[ -n "${CLANG_BIN_PATH:-}" && -x "${CLANG_BIN_PATH}/clang" ]] && export PATH="${CLANG_BIN_PATH}:$PATH"
        export LLVM=1 ARCH=arm64 SUBARCH=arm64
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
        export KCFLAGS="-O2 -pipe -Wno-error -fno-stack-protector"
        make -j"$(n Hawkinsnproc)" O="$OUT" gki_defconfig
        make O="$OUT" olddefconfig
        if [[ -x scripts/config ]]; then
          scripts/config --file "$OUT/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
          scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO || true
        else
          echo "scripts/config not found; skipping LOCALVERSION"
        fi
        : > .scmversion
        make O="$OUT" olddefconfig
        make -j"$(nproc)" O="$OUT"
        IMAGE="$OUT/arch/arm64/boot/Image"
        [[ -f "$IMAGE" ]] || { echo "Image missing"; exit 1; }
        sha256sum "$IMAGE" | tee "$OUT/Image.sha256"
        cp "$IMAGE" "$GITHUB_WORKSPACE/AnyKernel3/Image"

    - name: KPM patch_linux
      if: ${{ inputs.KPM == 'true' }}
      shell: bash
      run: |
        set -e
        OUT="$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common/out"
        FINAL="$OUT/Final-Image"
        mkdir -p "$FINAL"
        cp "$OUT/arch/arm64/boot/Image" "$FINAL/Image"
        cd "$FINAL"
        curl -LO https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
        chmod +x patch_linux
        if ./patch_linux; then
          [ -f oImage ] && mv oImage Image
          cp Image "$GITHUB_WORKSPACE/AnyKernel3/Image"
          echo "KPM patch applied"
        else
          echo "KPM patch failed; keeping original"
        fi

    - name: Create Flashable ZIP
      shell: bash
      run: |
        set -e
        ART="$GITHUB_WORKSPACE/$CONFIG/artifacts"
        mkdir -p "$ART"
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        ZIP="AnyKernel3_${{ inputs.model }}_${KANDROID_VERSION}-${KERNEL_VERSION}_SukiSU_${KSUVER}_SUSFS_${SUFVER:-unknown}.zip"
        rm -rf .git || true
        echo "Creating $ZIP"
        zip -r9 "$ZIP" ./*
        mv "$ZIP" "$ART/"
        echo "ZIP created at $ART/$ZIP"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: ${{ env.CONFIG }}/artifacts/*
