name: Build
permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  susfs_branch:
    required: true
    type: string
    default: ""
  KSU_META:
    type: string
    description: "susfs-main/custom version identifier (e.g., susfs-main/Wild)"
    required: false
    default: "susfs-main/Wild"
  KPM:
    type: boolean
    description: "Enable Kernel Module (KPM)"
    required: true
    default: true
  HOOK:
    type: choice
    description: "Hook type"
    required: true
    default: manual
    options:
      - kprobe
      - manual
      - tracepoint

runs:
  using: "composite"
  steps:
    - name: Maximize Build Space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 8192
        temp-reserve-mb: 2048
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
  
    - name: Setup Build System
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> "$GITHUB_ENV"
        df -h
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc \
        /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell \
        /usr/share/swift || true
        sudo docker image prune --all --force
        echo "Unused directories cleared"
        sudo apt-get purge -y aria2 ansible azure-cli shellcheck rpm xorriso zsync \
        esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable google-cloud-sdk \
        imagemagick libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional \
        kubectl mercurial apt-transport-https mono-complete libmysqlclient unixodbc-dev \
        yarn chrpath libssl-dev libxft-dev libfreetype6 libfreetype6-dev libfontconfig1 \
        libfontconfig1-dev snmp pollinate libpq-dev postgresql-client powershell ruby-full \
        sphinxsearch subversion mongodb-org microsoft-edge-stable || true
        sudo apt-get purge -y "$(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet' || true)" || true
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
        echo "Package cleanup complete"
        df -h

    - name: Install Dependencies
      shell: bash
      run: |
        sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
        sudo apt update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt install -yq --no-install-recommends \
          python3 git curl libelf-dev libelf1 lld \
          build-essential flex bison libssl-dev \
          libncurses-dev liblz4-tool zlib1g-dev \
          libxml2-utils rsync unzip python3 python-is-python3   

    - name: Install Repo Tool
      shell: bash
      run: |
        mkdir -p ./git-repo
        curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
        chmod a+rx ./git-repo/repo
        echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> "$GITHUB_ENV"
        echo "CONFIG=${{ inputs.model }}" >> "$GITHUB_ENV"
        echo "KANDROID_VERSION=${{ inputs.android_version }}" >> "$GITHUB_ENV"
        echo "KERNEL_VERSION=${{ inputs.kernel_version }}" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        echo "Cloning AnyKernel3 and other dependencies..."
        ANYKERNEL_BRANCH="gki-2.0"
        if [[ -z "${{ inputs.susfs_branch }}" ]]; then
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        else
          SUSFS_BRANCH="${{ inputs.susfs_branch }}"
        fi
        echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
        echo "Using branch for SUSFS: $SUSFS_BRANCH"
        git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
        git clone https://github.com/ShirkNeko/SukiSU_patch.git

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        echo "Creating folder for configuration: $CONFIG..."
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        echo "Initializing and syncing kernel source..."
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls ${{ inputs.manifest }} -o .repo/manifests/temp_manifest.xml
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/${{ inputs.soc }} -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        $REPO --version
        $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) --fail-fast

    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
        rm -f msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"
        df -h

    - name: Add SukiSU Ultra
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        echo "Adding SukiSU Ultra..."
        META="${{ inputs.KSU_META }}"
        BRANCH_NAME="${META%%/*}"
        CUSTOM_TAG="${META#*/}"
        echo "Branch name: $BRANCH_NAME"
        echo "Custom version identifier: $CUSTOM_TAG"
        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/setup.sh" | bash -s "$BRANCH_NAME"
        cd ./KernelSU
        KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
          grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
        if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
          KSU_API_VERSION="3.1.7"
        fi
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
        GIT_HASH=$(git rev-parse --short HEAD)
        echo "GIT_HASH=$GIT_HASH"
        if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
          VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@$BRANCH_NAME"
        else
          VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$GIT_HASH]"
        fi
        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
        VERSION_DEFINITIONS=$(cat <<EOF
        define get_ksu_version_full
        $VERSION_FULL
        endef
        
        KSU_VERSION_API := $KSU_API_VERSION
        KSU_VERSION_FULL := $VERSION_FULL
        EOF
        )
        awk -v def="$VERSION_DEFINITIONS" '
          /REPO_OWNER :=/ {print; print def; inserted=1; next}
          1
          END {if (!inserted) print def}
        ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile
        KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
        echo "::group::Final version information and partial debug output in Makefile"
        grep -A10 "REPO_OWNER" kernel/Makefile
        grep "KSU_VERSION_FULL" kernel/Makefile
        echo "::endgroup::"

    - name: Apply Patches SukiSU Ultra
      shell: bash
      run: |
        cd "$CONFIG"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }} --depth 1
        git clone https://github.com/ShirkNeko/SukiSU_patch.git --depth 1
        cd kernel_platform
        echo "Pulling SUSFS patches"
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
        cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        cd ./common
        GKI_V="${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}"
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')
        if [ "$GKI_V" == "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
          echo "Fixing bugs caused by older C library support for kernel versions 5.15.0 to 5.15.123"
          curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
          patch -p1 < fix_5.15.legacy.patch
          echo "fix_5.15_patch completed"
        fi
        KERNEL_VERSION="${{ env.KERNEL_VERSION }}"
        file="${{ github.event.inputs.FILE }}"
        if [ "${{ github.event.inputs.SUSFS_ENABLE }}" = "true" ]; then
          echo "Applying SUSFS patch"
          patch -p1 < 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
          echo "susfs_patch completed"
        fi

    - name: Apply Hide Stuff Patches
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform/common"
        cp ../../SukiSU_patch/69_hide_stuff.patch ./
        echo "Applying hide application patches..."
        patch -p1 -F 3 < 69_hide_stuff.patch
        echo "Hide application patch completed"

    - name: Apply HOOK
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform/common"
        if [ "${{ inputs.HOOK }}" = "kprobe" ]; then
          echo "Invoking kprobe hook"
        elif [ "${{ inputs.HOOK }}" = "manual" ]; then
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "Invoking manual hook"
          patch -p1 -F 3 < syscall_hooks.patch
        elif [ "${{ inputs.HOOK }}" = "tracepoint" ]; then
          cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch ./
          echo "Invoking tracepoint hook"
          patch -p1 -F 3 < tracepoint_hooks.patch
        fi
      
    - name: Add kernelSU and SUSFS Configuration Settings
      shell: bash
      run: |
        cd $CONFIG/kernel_platform
        CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
        KERNEL_VERSION="${{ inputs.kernel_version }}"

        # SukiSU Ultra configuration
        echo "CONFIG_KSU=y" >> "$CONFIG_FILE"

        # KPM configuration
        if [ "${{ inputs.KPM }}" = "true" ]; then
          echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
        fi

        # HOOK configuration
        if [ "${{ inputs.HOOK }}" = "kprobe" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_KPROBES_HOOK=y" >> "$CONFIG_FILE"
        elif [ "${{ inputs.HOOK }}" = "manual" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
        elif [ "${{ inputs.HOOK }}" = "tracepoint" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> "$CONFIG_FILE" 
        fi

        # SUSFS configuration
        echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"

        # TMPFS configuration
        echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
        echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"

    - name: Add BBR v1 Support
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        echo "Adding configuration settings to gki_defconfig..."
        echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_NET_SCH_FQ_CODEL=y" >> ./common/arch/arm64/configs/gki_defconfig

    - name: Add TTL Target Support
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        echo "Adding configuration settings to gki_defconfig..."
        echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig

    - name: Add Build based configs
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        echo "CONFIG_LTO_CLANG_THIN=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_LTO_CLANG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "./common/arch/arm64/configs/gki_defconfig"
        echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" >> "./common/arch/arm64/configs/gki_defconfig"

    - name: Save Build Metadata
      shell: bash
      id: save_metadata
      run: |
        CONFIG_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG }}"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        
        cd "$CONFIG_DIR/kernel_platform/common"
        CONFIG_FILES=("build.config.common" "build.config.constants")
        BRANCH_LINE=""
        
        for file in "${CONFIG_FILES[@]}"; do
          if [ -f "$file" ]; then
            line=$(grep '^[[:space:]]*BRANCH=' "$file" | head -n1 || true)
            if [ -n "$line" ]; then
              BRANCH_LINE="$line"
              echo "Found BRANCH in: $file"
              break  # Found it — exit loop
            else
              echo "File exists but no BRANCH= found: $file"
            fi
          else
            echo "File not found: $file"
          fi
        done
        
        if [ -z "$BRANCH_LINE" ]; then
          echo "Error: No BRANCH= found in any of: ${CONFIG_FILES[*]}"
          exit 1
        fi
        
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        
        if [ -z "$ANDROID_VERSION" ]; then
          echo "Error: Could not extract 'androidXX' from BRANCH='$BRANCH_VALUE'"
          exit 1
        fi
        
        # Extract values using grep and awk
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        
        echo "Kernel Version: $ANDROID_VERSION-$FULL_VERSION"
        
        cd "$ARTIFACTS_DIR"
        echo "$ANDROID_VERSION-$FULL_VERSION" > ${{ inputs.model }}.txt
        echo "ANDROID_VER=$ANDROID_VERSION" >> $GITHUB_ENV

    - name: Run sed and perl Commands
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        echo "Running sed commands..."
        sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "./common/arch/arm64/configs/gki_defconfig"
        
        sed -i 's/check_defconfig//' ./common/build.config.gki
        tac ./common/scripts/setlocalversion | sed '0,/echo "\$res"/s//res="-${{ env.ANDROID_VER }}-OP-Wild"\;echo "\$res"\;/' | tac > ./common/scripts/setlocalversion.tmp && mv ./common/scripts/setlocalversion.tmp ./common/scripts/setlocalversion
        tac ./msm-kernel/scripts/setlocalversion | sed '0,/echo "\$res"/s//res="-${{ env.ANDROID_VER }}-OP-Wild"\;echo "\$res"\;/' | tac > ./msm-kernel/scripts/setlocalversion.tmp && mv ./msm-kernel/scripts/setlocalversion.tmp ./msm-kernel/scripts/setlocalversion
        tac ./external/dtc/scripts/setlocalversion | sed '0,/echo "\$res"/s//res="-${{ env.ANDROID_VER }}-OP-Wild"\;echo "\$res"\;/' | tac > ./external/dtc/scripts/setlocalversion.tmp && mv ./external/dtc/scripts/setlocalversion.tmp ./external/dtc/scripts/setlocalversion
        sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "-${{ env.ANDROID_VER }}-OP-Wild"/' ./common/scripts/setlocalversion
        sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "-${{ env.ANDROID_VER }}-OP-Wild"/' ./msm-kernel/scripts/setlocalversion
        sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "-${{ env.ANDROID_VER }}-OP-Wild"/' ./external/dtc/scripts/setlocalversion
        chmod +x ./common/scripts/setlocalversion
        chmod +x ./msm-kernel/scripts/setlocalversion
        chmod +x ./external/dtc/scripts/setlocalversion
        if [ -f ./build/kernel/kleaf/impl/stamp.bzl ]; then
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
        else
          echo "No stamp.bzl!"
        fi
        sed -i 's/-dirty//' ./common/scripts/setlocalversion
        sed -i 's/-dirty//' ./msm-kernel/scripts/setlocalversion
        sed -i 's/-dirty//' ./external/dtc/scripts/setlocalversion
        if [ -f ./build/kernel/kleaf/workspace_status_stamp.py ]; then
          sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py
        else
          echo "No workspace_status_stamp.py!"
        fi
        
        DATESTR=$(date -u)
        perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT '"$DATESTR"'"}' ./common/scripts/mkcompile_h
        perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT '"$DATESTR"'"}' ./msm-kernel/scripts/mkcompile_h

    - name: Detect Clang Version from Configs
      shell: bash
      run: |
        KERNEL_PATH="$GITHUB_WORKSPACE/${{ env.CONFIG }}/kernel_platform"
        DEFCONFIG="$KERNEL_PATH/common/arch/arm64/configs/gki_defconfig"
        BUILDCONFIG="$KERNEL_PATH/common/build.config.gki"
        CONSTANTSCONFIG="$KERNEL_PATH/common/build.config.constants"
        CLANG_VERSION=""
        CLANG_BIN_PATH=""
        if grep -q '^CONFIG_CLANG_VERSION=' "$DEFCONFIG" 2>/dev/null; then
          CLANG_VERSION=$(grep '^CONFIG_CLANG_VERSION=' "$DEFCONFIG" 2>/dev/null | head -n1 | cut -d'=' -f2 | tr -d '"' | xargs)
        elif grep -q '^CLANG_VERSION=' "$BUILDCONFIG" 2>/dev/null; then
          CLANG_VERSION=$(grep '^CLANG_VERSION=' "$BUILDCONFIG" 2>/dev/null | head -n1 | cut -d'=' -f2 | xargs)
        elif grep -q '^CLANG_VERSION=' "$CONSTANTSCONFIG" 2>/dev/null; then
          CLANG_VERSION=$(grep '^CLANG_VERSION=' "$CONSTANTSCONFIG" 2>/dev/null | head -n1 | cut -d'=' -f2 | xargs)
          CLANG_VERSION="clang-$CLANG_VERSION"
        else
          echo "No clang version found in config, will auto-detect in prebuilts."
        fi
        if [ -z "$CLANG_VERSION" ]; then
          if [ -d "$KERNEL_PATH/prebuilts/clang/host/linux-x86" ]; then
            CLANG_VERSION=$(ls -d "$KERNEL_PATH"/prebuilts/clang/host/linux-x86/clang-r*/ | tail -n 1 | xargs basename)
            CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin"
          elif [ -d "$KERNEL_PATH/prebuilts-master/clang/host/linux-x86" ]; then
            CLANG_VERSION=$(ls -d "$KERNEL_PATH"/prebuilts-master/clang/host/linux-x86/clang-r*/ | tail -n 1 | xargs basename)
            CLANG_BIN_PATH="$KERNEL_PATH/prebuilts-master/clang/host/linux-x86/$CLANG_VERSION/bin"
          else
            CLANG_VERSION="clang"
            CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin" # dummy
          fi
        else
          if [ -d "$KERNEL_PATH/prebuilts/clang/host/linux-x86" ]; then
            CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin"
          else
            CLANG_BIN_PATH="$KERNEL_PATH/prebuilts-master/clang/host/linux-x86/$CLANG_VERSION/bin"
          fi
        fi
        echo "Detected CLANG_VERSION: $CLANG_VERSION"
        echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
        echo "CLANG_BIN_PATH=$CLANG_BIN_PATH" >> $GITHUB_ENV

    - name: Build Kernel
      shell: bash
      run: |
        KERNEL_PATH="$GITHUB_WORKSPACE/${{ env.CONFIG }}/kernel_platform"
        CLANG_BIN_PATH="${{ env.CLANG_BIN_PATH }}"
        CLANG_VERSION="${{ env.CLANG_VERSION }}"
        if [ -d "$CLANG_BIN_PATH" ] && [ -x "$CLANG_BIN_PATH/clang" ]; then
          echo "Adding Clang to PATH: $CLANG_BIN_PATH"
          export PATH="$CLANG_BIN_PATH:$PATH"
          SELECTED_CLANG="$CLANG_BIN_PATH/clang"
        elif command -v clang >/dev/null 2>&1; then
          SELECTED_CLANG="$(command -v clang)"
          echo "Using system Clang: $SELECTED_CLANG"
          exit 1
        else
          echo "Error: No valid Clang binary found"
          exit 1
        fi
        echo "Using Clang version: $($SELECTED_CLANG --version | head -n1)"
        LLVM_TOOLS="clang ld.lld llvm-ar llvm-objcopy llvm-objdump llvm-nm"
        MISSING_TOOLS=""
        for tool in $LLVM_TOOLS; do
          if ! command -v $tool >/dev/null 2>&1; then
            MISSING_TOOLS="$MISSING_TOOLS $tool"
          fi
        done
        if [ -n "$MISSING_TOOLS" ]; then
          echo "Installing missing LLVM tools:$MISSING_TOOLS"
          sudo apt-get update
          sudo apt-get install -yq --no-install-recommends llvm
          for tool in $MISSING_TOOLS; do
            if ! command -v $tool >/dev/null 2>&1; then
              echo "Error: Failed to install $tool"
              exit 1
            fi
          done
        fi
        KERNEL_VERSION="${{ inputs.kernel_version }}"
        if [[ "$KERNEL_VERSION" == "5.10" ]]; then
          USE_LLVM_IAS=true
        fi
        cd "$KERNEL_PATH/common" || exit 1
        MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- \
          RUSTC=$KERNEL_PATH/prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
          PAHOLE=$KERNEL_PATH/prebuilts/kernel-build-tools/linux-x86/bin/pahole \
          LD=ld.lld HOSTLD=ld.lld"
        if [[ -v USE_LLVM_IAS ]]; then
          MAKE_ARGS="LLVM_IAS=1 $MAKE_ARGS"
        fi
        
        make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O2 -flto=thin -fno-stack-protector" gki_defconfig || exit 1
        make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O2 -flto=thin -fno-stack-protector" || exit 1

    - name: Apply patch_linux and replace Image
      if: ${{ inputs.KPM == 'true' }}
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/out/Final-Image-Find"
        curl -LO --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
        chmod +x patch_linux
        ./patch_linux
        rm -f Image
        mv oImage Image
        cp Image $GITHUB_WORKSPACE/AnyKernel3/Image

    - name: Create Kernel ZIP
      id: create_zip
      shell: bash
      run: |
        CONFIG_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG }}"
        KERNEL_PATH="$CONFIG_DIR/kernel_platform"
        cp "$KERNEL_PATH/common/out/arch/arm64/boot/Image" "$GITHUB_WORKSPACE/AnyKernel3/Image"
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
          cp "$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/bins/"* ./tools/
          patch -F 3 < "$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/ak3_hmbird_patch.patch"
        fi
        ZIP_NAME="AnyKernel3_${{ inputs.model }}_${{ inputs.android_version }}-${{ inputs.kernel_version }}_SukiSU_${{ env.KSUVER }}.zip"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        echo "Creating zip file $ZIP_NAME in $ARTIFACTS_DIR..."
        zip -r "$ARTIFACTS_DIR/$ZIP_NAME" ./*

    - name: Upload Artifacts
      if: success() && steps.create_zip.conclusion == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: |
          ${{ env.CONFIG }}/artifacts/*
