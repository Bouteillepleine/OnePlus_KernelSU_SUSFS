name: Build
permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    required: true
    type: string
    default: ""
  KSU_META:
    description: 'SukiSU Ultra branch/custom version identifier (e.g., susfs-main/⚡Ultra⚡)'
    required: false
    type: string
    default: 'susfs-main/⚡Ultra⚡'
  KPM:
    description: 'Enable KPM?'
    required: true
    type: boolean
    default: true
  HOOK:
    description: 'Hook type'
    required: false
    type: choice
    default: manual
    options:
      - kprobe
      - manual
      - tracepoint

runs:
  using: composite
  steps:
    - name: Setup Build System
      shell: bash
      run: |
        set -e
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> "$GITHUB_ENV"
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
        sudo docker image prune --all --force || true
        sudo apt-get purge -y aria2 ansible azure-cli shellcheck rpm xorriso zsync esl-erlang firefox google-chrome-stable google-cloud-sdk imagemagick ant kubectl mercurial mono-complete yarn ruby-full subversion mongodb-org microsoft-edge-stable || true
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
    
    - name: Install Dependencies
      shell: bash
      run: |
        set -e
        sudo apt update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
          git curl python3 libelf-dev libelf1 lld build-essential flex bison libssl-dev \
          libncurses-dev liblz4-tool zlib1g-dev libxml2-utils rsync unzip dwarves
    
    - name: Install Repo Tool
      shell: bash
      run: |
        mkdir -p ./git-repo
        curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
        chmod a+rx ./git-repo/repo
        echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> "$GITHUB_ENV"
        echo "CONFIG=${{ inputs.model }}" >> "$GITHUB_ENV"
        echo "KANDROID_VERSION=${{ inputs.android_version }}" >> "$GITHUB_ENV"
        echo "KERNEL_VERSION=${{ inputs.kernel_version }}" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        echo "Cloning AnyKernel3 and other dependencies..."
        ANYKERNEL_BRANCH="gki-2.0"
        SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        
        echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
        echo "Using branch for SUSFS: $SUSFS_BRANCH"
        git clone https://github.com/Bouteillepleine/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
        git clone https://github.com/ShirkNeko/SukiSU_patch.git

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        echo "Creating folder for configuration: $CONFIG..."
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        echo "Initializing and syncing kernel source..."
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls ${{ inputs.manifest }} -o .repo/manifests/temp_manifest.xml
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/${{ inputs.soc }} -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        $REPO --version
        $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) --fail-fast

    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
        rm -f msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"
        df -h

    - name: Branding
      shell: bash
      run: |
        set -e
        CUSTOM_LOCALVERSION="-${KANDROID_VERSION}-OP-⚡Ultra⚡"
        echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"

    - name: Add SukiSU Ultra
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        echo "Adding SukiSU Ultra..."
        META="${{ inputs.KSU_META }}"
        BRANCH_NAME="${META%%/*}"
        CUSTOM_TAG="${META#*/}"
        echo "Branch name: $BRANCH_NAME"
        echo "Custom version identifier: $CUSTOM_TAG"
        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/setup.sh" | bash -s "$BRANCH_NAME"
        cd ./KernelSU
        KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
          grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
        if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
          KSU_API_VERSION="3.1.7"
        fi
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
        GIT_HASH=$(git rev-parse --short HEAD)
        echo "GIT_HASH=$GIT_HASH"
        if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
          VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@$BRANCH_NAME"
        else
          VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$GIT_HASH]"
        fi
        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
        VERSION_DEFINITIONS=$(cat <<EOF
        define get_ksu_version_full
        $VERSION_FULL
        endef
        
        KSU_VERSION_API := $KSU_API_VERSION
        KSU_VERSION_FULL := $VERSION_FULL
        EOF
        )
        awk -v def="$VERSION_DEFINITIONS" '
          /REPO_OWNER :=/ {print; print def; inserted=1; next}
          1
          END {if (!inserted) print def}
        ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile
        KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
        echo "::group::Final version information and partial debug output in Makefile"
        grep -A10 "REPO_OWNER" kernel/Makefile
        grep "KSU_VERSION_FULL" kernel/Makefile
        echo "::endgroup::"

    - name: Apply Patches SukiSU Ultra
      shell: bash
      run: |
        cd "$CONFIG"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        cd kernel_platform
        echo "Pulling susfs patches"
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
        cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
              
        cd ./common
        GKI_V="${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}"
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')
      
        if [ "$GKI_V" == "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
          echo "Fixing bugs caused by older C library support in kernel versions 5.15.0 to 5.15.123"
          curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
          patch -p1 < fix_5.15.legacy.patch
          echo "fix_5.15_patch completed"
        fi
        KERNEL_VERSION="${{ env.KERNEL_VERSION }}"
        file="${{ github.event.inputs.FILE }}"
        TRUSTY_EXISTS="false"
        if [[ "$KERNEL_VERSION" == "6.6" ]]; then
          if grep -q 'common-modules/trusty' "$GITHUB_WORKSPACE/.repo/manifests_fallback/${file}.xml"; then
            TRUSTY_EXISTS="true"
          fi
          echo "trusty_exists=$TRUSTY_EXISTS" >> $GITHUB_OUTPUT
      
          if [[ "$TRUSTY_EXISTS" == "false" && "$file" != "oneplus_pad_2_pro" && "$file" != "oneplus_pad_3" ]]; then
            echo "Fixing susfs errors caused by missing Trusty OS in some kernel version 6.6 devices"
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${KERNEL_VERSION}.patch
            sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${KERNEL_VERSION}.patch
          fi
        fi
        echo "Applying susfs patch"
        patch -p1 < 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
        echo "susfs_patch completed"

    - name: Apply Hide Stuff Patches
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform/common"
        cp ../../SukiSU_patch/69_hide_stuff.patch ./
        echo "Applying hide application patches..."
        patch -p1 -F 3 < 69_hide_stuff.patch
        echo "Hide application patch completed"
      
    - name: Apply HOOK
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform/common"
        if [ "${{ inputs.HOOK }}" = "kprobe" ]; then
          echo "Invoking kprobe hook"
        elif [ "${{ inputs.HOOK }}" = "manual" ]; then
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "Invoking manual hook"
          patch -p1 -F 3 < syscall_hooks.patch
        elif [ "${{ inputs.HOOK }}" = "tracepoint" ]; then
          cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch ./
          echo "Invoking tracepoint hook"
          patch -p1 -F 3 < tracepoint_hooks.patch
        fi
      
    - name: Add kernelSU and SUSFS Configuration Settings
      shell: bash
      run: |
        cd $CONFIG/kernel_platform
        CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
        KERNEL_VERSION="${{ inputs.kernel_version }}"

        # SukiSU Ultra configuration
        echo "CONFIG_KSU=y" >> "$CONFIG_FILE"

        # KPM configuration
        if [ "${{ inputs.KPM }}" = "true" ]; then
          echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
        fi

        # HOOK configuration
        if [ "${{ inputs.HOOK }}" = "kprobe" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_KPROBES_HOOK=y" >> "$CONFIG_FILE"
        elif [ "${{ inputs.HOOK }}" = "manual" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
        elif [ "${{ inputs.HOOK }}" = "tracepoint" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> "$CONFIG_FILE" 
        fi

        # SUSFS configuration
        echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"

        # TMPFS configuration
        echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
        echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"

    - name: Add BBR v1 Support
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        echo "Adding configuration settings to gki_defconfig..."
        echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_NET_SCH_FQ_CODEL=y" >> ./common/arch/arm64/configs/gki_defconfig
        sed -i -e '/CONFIG_NET_SCH_FQ_CODEL=/d' -e '$aCONFIG_NET_SCH_FQ_CODEL=y' ./common/arch/arm64/configs/gki_defconfig

    - name: Add TTL Target Support
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        echo "Adding configuration settings to gki_defconfig..."
        echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig

    - name: Add Build based configs
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        echo "CONFIG_LTO_CLANG_THIN=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_LTO_CLANG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "./common/arch/arm64/configs/gki_defconfig"
        echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" >> "./common/arch/arm64/configs/gki_defconfig"
        echo "CONFIG_OPTIMIZE_INLINING=y" >> "./common/arch/arm64/configs/gki_defconfig" 
        echo "CONFIG_DEBUG_KERNEL=n" >> "./common/arch/arm64/configs/gki_defconfig"
        echo "CONFIG_DYNAMIC_DEBUG=n" >> "./common/arch/arm64/configs/gki_defconfig"
        echo "CONFIG_DEBUG_INFO=n" >> "./common/arch/arm64/configs/gki_defconfig"
        echo "CONFIG_DAMON=n" >> "./common/arch/arm64/configs/gki_defconfig"
        echo "CONFIG_CRYPTO_SHA1_ARM64_CE=y" >> "./common/arch/arm64/configs/gki_defconfig"
        echo "CONFIG_VIRTIO_PCI_LEGACY=y" >> "./common/arch/arm64/configs/gki_defconfig"
        echo "CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y" >> "./common/arch/arm64/configs/gki_defconfig"
        echo "CONFIG_HEADERS_INSTALL=n" >> "./common/arch/arm64/configs/gki_defconfig"
        echo "CONFIG_PROC_MEM_ALWAYS_FORCE=n" >> "./common/arch/arm64/configs/gki_defconfig"

    - name: Disable OnePlus Kernel Module
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        if [ "${{ inputs.android_version }}" = "android14" ] && [ "${{ inputs.kernel_version }}" = "6.1" ]; then
        sed -i 's/CONFIG_REGMAP_KUNIT=m/CONFIG_REGMAP_KUNIT=n/g' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_REGMAP_KUNIT=m/CONFIG_REGMAP_KUNIT=n/g' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_INPUT_KUNIT_TEST=m/CONFIG_INPUT_KUNIT_TEST=n/g' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=m/CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=n/g' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_SND_SOC_UTILS_KUNIT_TEST=m/CONFIG_SND_SOC_UTILS_KUNIT_TEST=n/g' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_HID_KUNIT_TEST=m/CONFIG_HID_KUNIT_TEST=n/g' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_RTC_LIB_KUNIT_TEST=m/CONFIG_RTC_LIB_KUNIT_TEST=n/g' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_CLK_KUNIT_TEST=m/CONFIG_CLK_KUNIT_TEST=n/g' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_CLK_GATE_KUNIT_TEST=m/CONFIG_CLK_GATE_KUNIT_TEST=n/g' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_IIO_FORMAT_KUNIT_TEST=m/CONFIG_IIO_FORMAT_KUNIT_TEST=n/g' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_EXT4_KUNIT_TESTS=m/CONFIG_EXT4_KUNIT_TESTS=n/g' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_FAT_KUNIT_TEST=m/CONFIG_FAT_KUNIT_TEST=n/g' "./common/arch/arm64/configs/gki_defconfig"
        fi

    - name: Save Build Metadata
      shell: bash
      id: save_metadata
      run: |
        CONFIG_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG }}"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        
        cd "$CONFIG_DIR/kernel_platform/common"
        CONFIG_FILES=("build.config.common" "build.config.constants")
        BRANCH_LINE=""
        
        for file in "${CONFIG_FILES[@]}"; do
          if [ -f "$file" ]; then
            line=$(grep '^[[:space:]]*BRANCH=' "$file" | head -n1 || true)
            if [ -n "$line" ]; then
              BRANCH_LINE="$line"
              echo "Found BRANCH in: $file"
              break  # Found it — exit loop
            else
              echo "File exists but no BRANCH= found: $file"
            fi
          else
            echo "File not found: $file"
          fi
        done
        
        if [ -z "$BRANCH_LINE" ]; then
          echo "Error: No BRANCH= found in any of: ${CONFIG_FILES[*]}"
          exit 1
        fi
        
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        
        if [ -z "$ANDROID_VERSION" ]; then
          echo "Error: Could not extract 'androidXX' from BRANCH='$BRANCH_VALUE'"
          exit 1
        fi
        
        # Extract values using grep and awk
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        
        echo "Kernel Version: $ANDROID_VERSION-$FULL_VERSION"
        
        cd "$ARTIFACTS_DIR"
        echo "$ANDROID_VERSION-$FULL_VERSION" > ${{ inputs.model }}.txt
        echo "ANDROID_VER=$ANDROID_VERSION" >> $GITHUB_ENV
    
    - name: Detect Clang
      shell: bash
      run: |
        set -e
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        echo "Searching for Clang in $KP..."
        CLANG_FOUND=false
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          if [ -d "$base/clang/host/linux-x86" ]; then
            cand=$(ls -d "$base"/clang/host/linux-x86/clang-r*/ 2>/dev/null | sort -V | tail -n1 | xargs basename)
            if [ -n "$cand" ]; then
              CLANG_PATH="$base/clang/host/linux-x86/$cand/bin"
              if [ -x "$CLANG_PATH/clang" ]; then
                CLANG_VERSION=$("$CLANG_PATH/clang" --version | head -n1 | awk '{print $3}')
                echo "Found Clang: $CLANG_PATH/clang, version: $CLANG_VERSION"
                echo "CLANG_BIN_PATH=$CLANG_PATH" >> "$GITHUB_ENV"
                echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_ENV"
                CLANG_FOUND=true
                break
              fi
            fi
          fi
        done
        if [ "$CLANG_FOUND" = false ]; then
          echo "Error: Clang not found in $KP/prebuilts or $KP/prebuilts-master"
          exit 1
        fi
    
    - name: Build Kernel
      shell: bash
      run: |
        set -euo pipefail
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COM="$KP/common"
        OUT="$COM/out"
        cd "$COM"
        if [[ -n "${CLANG_BIN_PATH:-}" && -x "${CLANG_BIN_PATH}/clang" ]]; then
          export PATH="${CLANG_BIN_PATH}:$PATH"
        fi
        export LLVM=1 ARCH=arm64 SUBARCH=arm64
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androidkernel-
        export KCFLAGS="-O2 -pipe -Wno-error -fno-stack-protector"
        export KCPPFLAGS="-DCONFIG_OPTIMIZE_INLINING"
        mkdir -p "$OUT"
        make -j"$(nproc)" O="$OUT" gki_defconfig
        make O="$OUT" olddefconfig
        scripts/config --file "$OUT/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
        scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO || true
        : > .scmversion
        make O="$OUT" olddefconfig
        make -j"$(nproc)" O="$OUT"
        IMAGE="$OUT/arch/arm64/boot/Image"
        [ -f "$IMAGE" ] || { echo "Image missing"; exit 1; }
        sha256sum "$IMAGE" | tee "$OUT/Image.sha256"
        cp "$IMAGE" "$GITHUB_WORKSPACE/AnyKernel3/Image"
    
    - name: KPM patch_linux
      if: ${{ inputs.kpm == 'true' }}
      shell: bash
      run: |
        set -e
        OUT="$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common/out"
        FINAL="$OUT/Final-Image"
        mkdir -p "$FINAL"
        cp "$OUT/arch/arm64/boot/Image" "$FINAL/Image"
        cd "$FINAL"
        curl -LO https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
        chmod +x patch_linux
        ./patch_linux || echo "patch_linux failed; keeping original"
        [ -f oImage ] && mv oImage Image
        cp Image "$GITHUB_WORKSPACE/AnyKernel3/Image"
    
    - name: Create Flashable ZIP
      shell: bash
      run: |
        set -e
        ART="$GITHUB_WORKSPACE/$CONFIG/artifacts"
        mkdir -p "$ART"
        ZIP="AnyKernel3_${{ inputs.model }}_${KANDROID_VERSION}-${KERNEL_VERSION}_SukiSU_${KSUVER}_SUSFS_${SUSVER}.zip"
        (cd "$GITHUB_WORKSPACE/AnyKernel3"; zip -r "$ART/$ZIP" ./*)
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: ${{ env.CONFIG }}/artifacts/*
