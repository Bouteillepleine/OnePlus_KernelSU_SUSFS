name: Build
permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: susfs-main
  susfs_branch:
    required: true
    type: string
    default: ""
  KSU_META:
    type: string
    required: false
    default: "susfs-main/⚡Ultra⚡"
  HOOK:
    type: string
    required: true
    default: "manual"
    description: "Hook method to use. Valid options: 'kprobe', 'manual'"
  KPM:
    type: boolean
    description: "Enable Kernel Module (KPM)? Only applies to SukiSU."
    required: true
    default: true
  SCHED:
    type: boolean
    description: "Add Fengchi Driver?"
    required: true
    default: false
  SUSFS_CI:
    type: string
    required: true
    default: true

runs:
  using: "composite"
  steps:
    - name: Setup Build System
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> "$GITHUB_ENV"
        df -h
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc \
        /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell \
        /usr/share/swift || true
        sudo docker image prune --all --force
        echo "Unused directories cleared"
        sudo apt-get purge -y aria2 ansible azure-cli shellcheck rpm xorriso zsync \
        esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable google-cloud-sdk \
        imagemagick libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional \
        kubectl mercurial apt-transport-https mono-complete libmysqlclient unixodbc-dev \
        yarn chrpath libssl-dev libxft-dev libfreetype6 libfreetype6-dev libfontconfig1 \
        libfontconfig1-dev snmp pollinate libpq-dev postgresql-client powershell ruby-full \
        sphinxsearch subversion mongodb-org microsoft-edge-stable || true
        sudo apt-get purge -y "$(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet' || true)" || true
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
        echo "Package cleanup complete"
        df -h

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "0+builder"
        git config --global user.email "0+builder@qq.com"

    - name: Install Dependencies
      shell: bash
      run: |
        sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
        sudo apt update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt install -yq --no-install-recommends \
          python3 git curl libelf-dev libelf1 lld \
          build-essential flex bison libssl-dev \
          libncurses-dev liblz4-tool zlib1g-dev \
          libxml2-utils rsync unzip python3 python-is-python3 bc ccache

    - name: Configure ccache
      shell: bash
      run: |
        export CCACHE_DIR="$HOME/.ccache_${{ inputs.kernel_version }}"
        export CCACHE_MAXSIZE="3G"
        export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
        export CCACHE_NOHASHDIR="true"
        export CCACHE_HARDLINK="true"
        mkdir -p "$CCACHE_DIR"
        ccache -M "$CCACHE_MAXSIZE"
        ccache -o compression=true
        echo "ccache initial status:"
        ccache -s

    - name: Install Repo Tool
      shell: bash
      run: |
        mkdir -p ./git-repo
        curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
        chmod a+rx ./git-repo/repo
        echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> "$GITHUB_ENV"
        echo "CONFIG=${{ inputs.model }}" >> "$GITHUB_ENV"
        echo "KANDROID_VERSION=${{ inputs.android_version }}" >> "$GITHUB_ENV"
        echo "KERNEL_VERSION=${{ inputs.kernel_version }}" >> "$GITHUB_ENV"
        echo "CPU=${{ inputs.soc }}" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        echo "Cloning AnyKernel3 and other dependencies..."
        ANYKERNEL_BRANCH="gki-2.0"
        if [[ -z "${{ inputs.susfs_branch }}" ]]; then
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        else
          SUSFS_BRANCH="${{ inputs.susfs_branch }}"
        fi
        echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
        echo "Using branch for SUSFS: $SUSFS_BRANCH"
        git clone https://github.com/Bouteillepleine/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
        cd susfs4ksu || exit 1
        if git rev-parse --verify "origin/$SUSFS_BRANCH" >/dev/null 2>&1 || git rev-parse --verify "$SUSFS_BRANCH" >/dev/null 2>&1 ; then
          git checkout "$SUSFS_BRANCH"
          SUSVER=$(git describe --tags 2>/dev/null || echo "v1.5.2+")
          echo "SUSVER=$SUSVER" >> $GITHUB_ENV
        else
          echo "Error: '$SUSFS_BRANCH' is neither a valid branch/tag nor a valid commit hash."
          exit 1
        fi

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        echo "Creating folder for configuration: $CONFIG..."
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        echo "Initializing and syncing kernel source..."
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls ${{ inputs.manifest }} -o .repo/manifests/temp_manifest.xml
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        $REPO --version
        $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) --fail-fast

    - name: Set Android Version
      shell: bash
      run: |
        CONFIG_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG }}"
        cd "$CONFIG_DIR/kernel_platform/common"
        CONFIG_FILES=("build.config.common" "build.config.constants")
        BRANCH_LINE=""
        for file in "${CONFIG_FILES[@]}"; do
          if [ -f "$file" ]; then
            line=$(grep '^[[:space:]]*BRANCH=' "$file" | head -n1 || true)
            if [ -n "$line" ]; then
              BRANCH_LINE="$line"
              echo "Found BRANCH in: $file"
              break
            fi
          fi
        done
        if [ -z "$BRANCH_LINE" ]; then
          echo "Error: No BRANCH= found in any of: ${CONFIG_FILES[*]}"
          exit 1
        fi
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        if [ -z "$ANDROID_VERSION" ]; then
          echo "Error: Could not extract 'androidXX' from BRANCH='$BRANCH_VALUE'"
          exit 1
        fi
        echo "ANDROID_VER=$ANDROID_VERSION" >> $GITHUB_ENV

    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
        rm -f msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"
        df -h

    - name: Add SukiSU Ultra
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        META="${{ inputs.KSU_META }}"
        BRANCH_NAME="${META%%/*}"
        CUSTOM_TAG="${META#*/}"
        echo "Branch Name: $BRANCH_NAME"
        echo "Custom Version Identifier: $CUSTOM_TAG"
        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH_NAME"
        cd ./KernelSU
        GIT_COMMIT_HASH=$(git rev-parse --short=8 HEAD)
        echo "Current Commit Hash: $GIT_COMMIT_HASH"
        for i in {1..3}; do
          KSU_API_VERSION=$(curl -s "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
            grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
          [ -n "$KSU_API_VERSION" ] && break || sleep 1
        done
        if [[ -z "$KSU_API_VERSION" ]]; then
          KSU_API_VERSION="3.1.7"
        fi
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
        VERSION_DEFINITIONS=$'define get_ksu_version_full\nv'"$KSU_API_VERSION"'-'"$GIT_COMMIT_HASH"'@cctv18\nendef\n\nKSU_VERSION_API := '"$KSU_API_VERSION"'\nKSU_VERSION_FULL := v'"$KSU_API_VERSION"'-'"$GIT_COMMIT_HASH"'@cctv18'
        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
        awk -v def="$VERSION_DEFINITIONS" '
          /REPO_OWNER :=/ {print; print def; inserted=1; next}
          1
          END {if (!inserted) print def}
        ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile
        KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
        echo "::group::Preview of version information in the final Makefile and partial debug results"
        grep -A10 "REPO_OWNER" kernel/Makefile
        grep "KSU_VERSION_FULL" kernel/Makefile
        echo "::endgroup::"
        git submodule update --init --recursive

    - name: Apply Patches SukiSU Ultra
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG"
        cd kernel_platform
        echo "Fetching susfs patches"
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
        cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        cp ../SukiSU_patch/hooks/syscall_hooks.patch ./common/
        cp ../SukiSU_patch/69_hide_stuff.patch ./common/
        cd ./common
        GKI_V="${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        if [ -f 50_add_susfs_in_gki-${GKI_V}.patch ]; then
          echo "Applying susfs patch"
          patch -p1 -F 3 < 50_add_susfs_in_gki-${GKI_V}.patch
          echo "susfs_patch completed"
        else
          echo "susfs patch not found, skipping"
        fi
        if [ -f fs/susfs.c ]; then
          echo "Applying susfs.c patch"
          sed -i "s/ksu_susfs_version_full()/get_ksu_version_full()/g" fs/susfs.c
          echo "susfs.c patch completed"
        else
          echo "susfs.c not found, skipping"
        fi
        patch -p1 -F 3 < syscall_hooks.patch || true
        patch -p1 -F 3 < 69_hide_stuff.patch || true
        git add -A
        git commit -m "Add SukiSU Ultra Patches"

    - name: Validate HOOK Input
      shell: bash
      run: |
        case "${{ inputs.HOOK }}" in
          kprobe|manual)
            echo "Valid HOOK value: ${{ inputs.HOOK }}"
            ;;
          *)
            echo "Error: Invalid HOOK value '${{ inputs.HOOK }}'. Must be one of: kprobe, manual"
            exit 1
            ;;
        esac

    - name: Apply HOOK
      shell: bash
      run: |
        cd $CONFIG/kernel_platform/common
        if [ "${{ inputs.HOOK }}" = "kprobe" ]; then
          echo "Calling kprobe hook"
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KPROBES=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_KPROBES_HOOK=y" >> arch/arm64/configs/gki_defconfig
        elif [ "${{ inputs.HOOK }}" = "manual" ]; then
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "Calling manual hook"
          patch -p1 -F 3 < syscall_hooks.patch
        fi

    - name: Apply Fengchi Driver
      if: ${{ inputs.SCHED == 'true' }}
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        git clone https://github.com/ShirkNeko/fengchi_patches.git
        cd common
        if [ -f ../../fengchi_patches/fengchi_driver.patch ]; then
          echo "Applying Fengchi Driver patch"
          patch -p1 -F 3 < ../../fengchi_patches/fengchi_driver.patch
          echo "CONFIG_FENGCHI_SCHED=y" >> arch/arm64/configs/gki_defconfig
          git add -A
          git commit -m "Add Fengchi Driver"
        else
          echo "Fengchi Driver patch not found, skipping"
        fi

    - name: Add Configuration Settings
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
        echo "Adding configuration settings to gki_defconfig..."
        echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
        if [ "${{ inputs.KPM }}" = "true" ]; then
          echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
        fi
        if [ "${{ inputs.HOOK }}" = "manual" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
        fi
        echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
        echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"

    - name: Add BBR v1 Support
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_CUBIC=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_VEGAS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_NV=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_WESTWOOD=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_HTCP=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_BRUTAL=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_DEFAULT_TCP_CONG=cubic" >> ./common/arch/arm64/configs/gki_defconfig

    - name: Add Build based configs
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        echo "CONFIG_LTO_CLANG_THIN=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_LTO_CLANG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_DEBUG_KERNEL=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_DYNAMIC_DEBUG=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_DEBUG_INFO=n" >> ./common/arch/arm64/configs/gki_defconfig

    - name: Disable OnePlus Kernel Module
      shell: bash
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
        if [ "${{ inputs.android_version }}" = "android14" ] && [ "${{ inputs.kernel_version }}" = "6.1" ]; then
          echo "Disabling KUnit test modules in $CONFIG_FILE..."
          sed -i -e 's/CONFIG_REGMAP_KUNIT=m/CONFIG_REGMAP_KUNIT=n/g' \
                 -e 's/CONFIG_INPUT_KUNIT_TEST=m/CONFIG_INPUT_KUNIT_TEST=n/g' \
                 -e 's/CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=m/CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=n/g' \
                 -e 's/CONFIG_SND_SOC_UTILS_KUNIT_TEST=m/CONFIG_SND_SOC_UTILS_KUNIT_TEST=n/g' \
                 -e 's/CONFIG_HID_KUNIT_TEST=m/CONFIG_HID_KUNIT_TEST=n/g' \
                 -e 's/CONFIG_RTC_LIB_KUNIT_TEST=m/CONFIG_RTC_LIB_KUNIT_TEST=n/g' \
                 -e 's/CONFIG_CLK_KUNIT_TEST=m/CONFIG_CLK_KUNIT_TEST=n/g' \
                 -e 's/CONFIG_CLK_GATE_KUNIT_TEST=m/CONFIG_CLK_GATE_KUNIT_TEST=n/g' \
                 -e 's/CONFIG_IIO_FORMAT_KUNIT_TEST=m/CONFIG_IIO_FORMAT_KUNIT_TEST=n/g' \
                 -e 's/CONFIG_EXT4_KUNIT_TESTS=m/CONFIG_EXT4_KUNIT_TESTS=n/g' \
                 -e 's/CONFIG_FAT_KUNIT_TEST=m/CONFIG_FAT_KUNIT_TEST=n/g' \
                 "$CONFIG_FILE"
          echo "Modifications complete."
        else
          echo "Conditions not met (ANDROID_VERSION=${{ inputs.android_version }}, KERNEL_VERSION=${{ inputs.kernel_version }}). Skipping modifications."
        fi

    - name: Run sed and perl Commands
      shell: bash
      run: |
        echo "Changing to configurationattie
        cd "$CONFIG/kernel_platform"
        echo "Running sed commands..."
        sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "./common/arch/arm64/configs/gki_defconfig"
        sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "./common/arch/arm64/configs/gki_defconfig"
        
        sed -i 's/check_defconfig//' ./common/build.config.gki
        tac ./common/scripts/setlocalversion | sed '0,/echo "\$res"/s//res="-${{ env.ANDROID_VER }}-OP-⚡Ultra⚡"\;echo "\$res"\;/' | tac > ./common/scripts/setlocalversion.tmp && mv ./common/scripts/setlocalversion.tmp ./common/scripts/setlocalversion
        tac ./msm-kernel/scripts/setlocalversion | sed '0,/echo "\$res"/s//res="-${{ env.ANDROID_VER }}-OP-⚡Ultra⚡"\;echo "\$res"\;/' | tac > ./msm-kernel/scripts/setlocalversion.tmp && mv ./msm-kernel/scripts/setlocalversion.tmp ./msm-kernel/scripts/setlocalversion
        tac ./external/dtc/scripts/setlocalversion | sed '0,/echo "\$res"/s//res="-${{ env.ANDROID_VER }}-OP-⚡Ultra⚡"\;echo "\$res"\;/' | tac > ./external/dtc/scripts/setlocalversion.tmp && mv ./external/dtc/scripts/setlocalversion.tmp ./external/dtc/scripts/setlocalversion
        sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "-${{ env.ANDROID_VER }}-OP-⚡Ultra⚡"/' ./common/scripts/setlocalversion
        sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "-${{ env.ANDROID_VER }}-OP-⚡Ultra⚡"/' ./msm-kernel/scripts/setlocalversion
        sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "-${{ env.ANDROID_VER }}-OP-⚡Ultra⚡"/' ./external/dtc/scripts/setlocalversion
        chmod +x ./common/scripts/setlocalversion
        chmod +x ./msm-kernel/scripts/setlocalversion
        chmod +x ./external/dtc/scripts/setlocalversion
        if [ -f ./build/kernel/kleaf/impl/stamp.bzl ]; then
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
        else
          echo "No stamp.bzl!"
        fi
        sed -i 's/-dirty//' ./common/scripts/setlocalversion
        sed -i 's/-dirty//' ./msm-kernel/scripts/setlocalversion
        sed -i 's/-dirty//' ./external/dtc/scripts/setlocalversion
        if [ -f ./build/kernel/kleaf/workspace_status_stamp.py ]; then
          sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py
        else
          echo "No workspace_status_stamp.py!"
        fi
        
        DATESTR=$(date -u)
        perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT '"$DATESTR"'"}' ./common/scripts/mkcompile_h
        perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT '"$DATESTR"'"}' ./msm-kernel/scripts/mkcompile_h

    - name: Detect Clang Version from Configs
      shell: bash
      run: |
        KERNEL_PATH="$GITHUB_WORKSPACE/${{ env.CONFIG }}/kernel_platform"
        DEFCONFIG="$KERNEL_PATH/common/arch/arm64/configs/gki_defconfig"
        BUILDCONFIG="$KERNEL_PATH/common/build.config.gki"
        CONSTANTSCONFIG="$KERNEL_PATH/common/build.config.constants"
        CLANG_VERSION=""
        CLANG_BIN_PATH=""
        if grep -q '^CONFIG_CLANG_VERSION=' "$DEFCONFIG" 2>/dev/null; then
          CLANG_VERSION=$(grep '^CONFIG_CLANG_VERSION=' "$DEFCONFIG" 2>/dev/null | head -n1 | cut -d'=' -f2 | tr -d '"' | xargs)
        elif grep -q '^CLANG_VERSION=' "$BUILDCONFIG" 2>/dev/null; then
          CLANG_VERSION=$(grep '^CLANG_VERSION=' "$BUILDCONFIG" 2>/dev/null | head -n1 | cut -d'=' -f2 | xargs)
        elif grep -q '^CLANG_VERSION=' "$CONSTANTSCONFIG" 2>/dev/null; then
          CLANG_VERSION=$(grep '^CLANG_VERSION=' "$CONSTANTSCONFIG" 2>/dev/null | head -n1 | cut -d'=' -f2 | xargs)
          CLANG_VERSION="clang-$CLANG_VERSION"
        else
          echo "No clang version found in config, will auto-detect in prebuilts."
        fi
        if [ -z "$CLANG_VERSION" ]; then
          if [ -d "$KERNEL_PATH/prebuilts/clang/host/linux-x86" ]; then
            CLANG_VERSION=$(ls -d "$KERNEL_PATH"/prebuilts/clang/host/linux-x86/clang-r*/ | tail -n 1 | xargs basename)
            CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin"
          elif [ -d "$KERNEL_PATH/prebuilts-master/clang/host/linux-x86" ]; then
            CLANG_VERSION=$(ls -d "$KERNEL_PATH"/prebuilts-master/clang/host/linux-x86/clang-r*/ | tail -n 1 | xargs basename)
            CLANG_BIN_PATH="$KERNEL_PATH/prebuilts-master/clang/host/linux-x86/$CLANG_VERSION/bin"
          else
            CLANG_VERSION="clang"
            CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin" # dummy
          fi
        else
          if [ -d "$KERNEL_PATH/prebuilts/clang/host/linux-x86" ]; then
            CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin"
          else
            CLANG_BIN_PATH="$KERNEL_PATH/prebuilts-master/clang/host/linux-x86/$CLANG_VERSION/bin"
          fi
        fi
        echo "Detected CLANG_VERSION: $CLANG_VERSION"
        echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
        echo "CLANG_BIN_PATH=$CLANG_BIN_PATH" >> $GITHUB_ENV

    - name: Build Kernel
      shell: bash
      run: |
        KERNEL_PATH="$GITHUB_WORKSPACE/${{ env.CONFIG }}/kernel_platform"
        CLANG_BIN_PATH="${{ env.CLANG_BIN_PATH }}"
        CLANG_VERSION="${{ env.CLANG_VERSION }}"
        if [ -d "$CLANG_BIN_PATH" ] && [ -x "$CLANG_BIN_PATH/clang" ]; then
          echo "Adding Clang to PATH: $CLANG_BIN_PATH"
          export PATH="$CLANG_BIN_PATH:$PATH"
          SELECTED_CLANG="$CLANG_BIN_PATH/clang"
        elif command -v clang >/dev/null 2>&1; then
          SELECTED_CLANG="$(command -v clang)"
          echo "Using system Clang: $SELECTED_CLANG"
          exit 1
        else
          echo "Error: No valid Clang binary found"
          exit 1
        fi
        echo "Using Clang version: $($SELECTED_CLANG --version | head -n1)"
        LLVM_TOOLS="clang ld.lld llvm-ar llvm-objcopy llvm-objdump llvm-nm"
        MISSING_TOOLS=""
        for tool in $LLVM_TOOLS; do
          if ! command -v $tool >/dev/null 2>&1; then
            MISSING_TOOLS="$MISSING_TOOLS $tool"
          fi
        done
        if [ -n "$MISSING_TOOLS" ]; then
          echo "Installing missing LLVM tools:$MISSING_TOOLS"
          sudo apt-get update
          sudo apt-get install -yq --no-install-recommends llvm
          for tool in $MISSING_TOOLS; do
            if ! command -v $tool >/dev/null 2>&1; then
              echo "Error: Failed to install $tool"
              exit 1
            fi
          done
        fi
        KERNEL_VERSION="${{ inputs.kernel_version }}"
        if [[ "$KERNEL_VERSION" == "5.10" ]]; then
          USE_LLVM_IAS=true
        fi
        cd "$KERNEL_PATH/common" || exit 1
        MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- \
          RUSTC=$KERNEL_PATH/prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
          PAHOLE=$KERNEL_PATH/prebuilts/kernel-build-tools/linux-x86/bin/pahole \
          LD=ld.lld HOSTLD=ld.lld CC=ccache clang"
        if [[ -v USE_LLVM_IAS ]]; then
          MAKE_ARGS="LLVM_IAS=1 $MAKE_ARGS"
        fi
        make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O2 -flto=thin -fno-stack-protector" gki_defconfig || exit 1
        make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O2 -flto=thin -fno-stack-protector" || exit 1

    - name: Make AnyKernel3
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        mkdir -p "$CONFIG/kernel_platform/out/Final-Image-Find/"
        dir1=""
        dir2=""
        image_path=$(find "$CONFIG/kernel_platform/common/out/" -name "Image" | head -n 1)
        if [ -n "$image_path" ]; then
          dir1=$(dirname "$image_path")/
          echo "Using the unified path compiled with make, successfully found the Image file"
        else
          image_path=$(find "$CONFIG/kernel_platform/out/" -name "Image" | head -n 1)
          if [ -n "$image_path" ]; then
            dir2=$(dirname "$image_path")/
            echo "Compiled with the official script, successfully found the Image file"
          else
            echo "Image file not found, build failed" >&2
            exit 1
          fi
        fi
        if [ -n "$image_path" ] && [ -f "$image_path" ]; then
          echo "Image file finally located at: $image_path"
          cp "$image_path" ./Image
          cp "$image_path" "$CONFIG/kernel_platform/out/Final-Image-Find/Image"
        fi

    - name: Apply patch_linux and replace Image
      if: ${{ inputs.KPM == 'true' }}
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/out/Final-Image-Find"
        curl -LO --retry 5 --retry-delay 2 --retry-connrefused https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
        chmod +x patch_linux
        ./patch_linux
        rm -f Image
        mv oImage Image
        cp Image "$GITHUB_WORKSPACE/AnyKernel3/Image"

    - name: Download Latest SUSFS Module from CI
      if: ${{ inputs.SUSFS_CI == 'CI' }}
      continue-on-error: true
      shell: bash
      run: |
        LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
          jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)
        if [ -z "$LATEST_RUN_ID" ]; then
          echo "No successful run found for branch v1.5.2+"
        else
          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url')
          if [ -n "$ARTIFACT_URL" ]; then
            curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o ksu_module_susfs_1.5.2+_CI.zip "$ARTIFACT_URL"
            cp ksu_module_susfs_1.5.2+_CI.zip "$GITHUB_WORKSPACE/AnyKernel3/"
          else
            echo "Failed to fetch artifact URL"
          fi
        fi

    - name: Save Build Metadata
      shell: bash
      id: save_metadata
      run: |
        CONFIG_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG }}"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        
        cd "$CONFIG_DIR/kernel_platform/common"
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        
        echo "Kernel Version: ${{ env.ANDROID_VER }}-$FULL_VERSION"
        
        cd "$ARTIFACTS_DIR"
        echo "${{ env.ANDROID_VER }}-$FULL_VERSION" > ${{ inputs.model }}.txt

    - name: Create Kernel ZIP
      id: create_zip
      shell: bash
      run: |
        CONFIG_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG }}"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
          cp "$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/bins/"* ./tools/
          patch -F 3 < "$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/ak3_hmbird_patch.patch"
        fi
        ZIP_NAME="AnyKernel3_${{ inputs.model }}_${{ inputs.android_version }}-${{ inputs.kernel_version }}_SukiSU_${{ env.KSUVER }}_SUSFS_${{ env.SUSVER }}.zip"
        echo "Creating zip file $ZIP_NAME in $ARTIFACTS_DIR..."
        zip -r "$ARTIFACTS_DIR/$ZIP_NAME" ./*

    - name: Upload Artifacts
      if: success() && steps.create_zip.conclusion == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: |
          ${{ env.CONFIG }}/artifacts/*
