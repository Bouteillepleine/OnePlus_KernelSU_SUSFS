name: Build
permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    required: true
    type: string
    default: ""
  KSU_META:
    description: 'SukiSU Ultra branch/custom version identifier (e.g., susfs-main/⚡Ultra⚡)'
    required: false
    type: string
    default: 'susfs-main/⚡Ultra⚡'
  KPM:
    description: 'Enable KPM?'
    required: true
    type: boolean
    default: true
  HOOK:
    description: 'Hook type'
    required: false
    type: choice
    default: manual
    options:
      - kprobe
      - manual
      - tracepoint

runs:
  using: composite
  steps:
    - name: Setup Build System
      shell: bash
      run: |
        set -e
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> "$GITHUB_ENV"
        df -h
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc \
          /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell \
          /usr/share/swift || true
        sudo docker image prune --all --force || true
        sudo apt-get purge -y aria2 ansible azure-cli shellcheck rpm xorriso zsync \
          esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable google-cloud-sdk \
          imagemagick libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional \
          kubectl mercurial apt-transport-https mono-complete libmysqlclient unixodbc-dev \
          yarn chrpath libssl-dev libxft-dev libfreetype6 libfreetype6-dev libfontconfig1 \
          libfontconfig1-dev snmp pollinate libpq-dev postgresql-client powershell ruby-full \
          sphinxsearch subversion mongodb-org microsoft-edge-stable || true
        sudo apt-get purge -y "$(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet' || true)" || true
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
        df -h
    
    - name: Install Dependencies
      shell: bash
      run: |
        set -e
        sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
        sudo apt update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt install -yq --no-install-recommends \
          python3 git curl libelf-dev libelf1 lld \
          build-essential flex bison libssl-dev \
          libncurses-dev liblz4-tool zlib1g-dev \
          libxml2-utils rsync unzip dwarves
    
    - name: Install Repo Tool
      shell: bash
      run: |
        set -e
        mkdir -p ./git-repo
        curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
        chmod a+rx ./git-repo/repo
        echo "REPO=$GITHUB_WORKSPACE/git-repo/repo" >> "$GITHUB_ENV"
        echo "CONFIG=${{ inputs.model }}" >> "$GITHUB_ENV"
        echo "KANDROID_VERSION=${{ inputs.android_version }}" >> "$GITHUB_ENV"
        echo "KERNEL_VERSION=${{ inputs.kernel_version }}" >> "$GITHUB_ENV"
    
    - name: Clone AnyKernel3 and Base Patches
      shell: bash
      run: |
        set -e
        ANYKERNEL_BRANCH="gki-2.0"
        if [[ -z "${{ inputs.susfs_branch }}" ]]; then
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        else
            SUSFS_BRANCH="${{ inputs.susfs_branch }}"
        fi
        echo "AnyKernel3 branch: $ANYKERNEL_BRANCH"
        echo "SUSFS branch: $SUSFS_BRANCH"
        git clone https://github.com/Bouteillepleine/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        git clone https://gitlab.com/simonpunk/susfs4ksu.git
        cd susfs4ksu
        if git rev-parse --verify "origin/$SUSFS_BRANCH" >/dev/null 2>&1 || git rev-parse --verify "$SUSFS_BRANCH" >/dev/null 2>&1 ; then
          git checkout "$SUSFS_BRANCH"
        else
          echo "Error: SUSFS branch/tag/commit '$SUSFS_BRANCH' not found."
            exit 1
        fi
    
    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        set -e
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls "${{ inputs.manifest }}" -o .repo/manifests/temp_manifest.xml
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b "${{ inputs.branch }}" -m "${{ inputs.manifest }}" --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        $REPO --version
        $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j"$(nproc --all)" --fail-fast
    
    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || true
        rm -f msm-kernel/android/abi_gki_protected_exports_* || true
    
    - name: Customize Kernel Branding
      shell: bash
      run: |
        set -e
        KERNEL_PATH="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform"
        COMMON_DIR="$KERNEL_PATH/common"
        cd "$COMMON_DIR"
        mkdir -p out
        CUSTOM_LOCALVERSION="-${KANDROID_VERSION}-OP-⚡Ultra⚡"
        echo "Using CUSTOM_LOCALVERSION=${CUSTOM_LOCALVERSION}"
        echo "CUSTOM_LOCALVERSION=${CUSTOM_LOCALVERSION}" >> "$GITHUB_ENV"
    
    - name: Add SukiSU Ultra
      shell: bash
      run: |
        set -e
        cd "$GITHUB_WORKSPACE/${CONFIG}/kernel_platform"
        META="${{ inputs.ksu_meta }}"
        if [[ -z "$META" ]]; then
          echo "KSU_META is empty, exiting."
          exit 1
        fi
        BRANCH_NAME="${META%%/*}"
        CUSTOM_TAG=""
        if [[ "$META" == *"/"* ]]; then
          CUSTOM_TAG="${META#*/}"
        fi
        echo "Branch name: $BRANCH_NAME"
        echo "Custom version tag: $CUSTOM_TAG"
        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH_NAME"
        cd ./KernelSU
        KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
          grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
        if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
          KSU_API_VERSION="3.1.7"
        fi
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
        GIT_HASH=$(git rev-parse --short HEAD)
        echo "GIT_HASH=$GIT_HASH"
        if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
          VERSION_FULL="v${KSU_API_VERSION}-${GIT_HASH}@${BRANCH_NAME}"
        else
          VERSION_FULL="v${KSU_API_VERSION}-${CUSTOM_TAG}@${BRANCH_NAME}[${GIT_HASH}]"
        fi
        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
        VERSION_DEFINITIONS=$(cat <<EOF
           define get_ksu_version_full
        $VERSION_FULL
        endef
        
        KSU_VERSION_API := $KSU_API_VERSION
        KSU_VERSION_FULL := $VERSION_FULL
        EOF
        )
        awk -v def="$VERSION_DEFINITIONS" '
        /REPO_OWNER :=/ {print; print def; inserted=1; next}
        1
        END {if (!inserted) print def}
        ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile
        KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
        echo "::group::Makefile version preview"
        grep -A10 "REPO_OWNER" kernel/Makefile || true
        grep "KSU_VERSION_FULL" kernel/Makefile || true
        echo "::endgroup::"
      
    - name: Apply Patches SukiSU Ultra
      shell: bash
      run: |
        set -e
        cd "$GITHUB_WORKSPACE"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${KANDROID_VERSION}-${KERNEL_VERSION} susfs4ksu_temp
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        cd "${CONFIG}/kernel_platform"
        echo "Fetching SUSFS patches"
        cp ../../susfs4ksu_temp/kernel_patches/50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch ./common/ || true
        cp ../../susfs4ksu_temp/kernel_patches/fs/* ./common/fs/ 2>/dev/null || true
        cp ../../susfs4ksu_temp/kernel_patches/include/linux/* ./common/include/linux/ 2>/dev/null || true
        cd ./common
        GKI_V="${KANDROID_VERSION}-${KERNEL_VERSION}"
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')
        if [ "$GKI_V" = "android13-5.15" ] && [ -n "$SUBLEVEL" ] && [ "$SUBLEVEL" -lt 123 ]; then
          echo "Applying legacy fix patch for 5.15 <= 123"
          curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused \
            https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
          patch -p1 < fix_5.15.legacy.patch || true
        fi
        FILE_INPUT="${{ inputs.file }}"
        if [ "$KERNEL_VERSION" = "6.6" ]; then
          TRUSTY_EXISTS="false"
          if grep -q 'common-modules/trusty' "$GITHUB_WORKSPACE/.repo/manifests_fallback/${FILE_INPUT}.xml" 2>/dev/null; then
            TRUSTY_EXISTS="true"
          fi
          echo "Trusty exists? $TRUSTY_EXISTS"
          if [[ "$TRUSTY_EXISTS" = "false" && "$FILE_INPUT" != "oneplus_pad_2_pro" && "$FILE_INPUT" != "oneplus_pad_3" ]]; then
            echo "Adjusting SUSFS patch for 6.6 devices missing Trusty"
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch || true
            sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch || true
          fi
        fi
        echo "Applying main SUSFS patch"
        patch -p1 < 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch || true
        echo "SUSFS patching completed"
        if [[ -f include/linux/susfs.h ]]; then
          SUSVER=$(grep '#define SUSFS_VERSION' include/linux/susfs.h | awk -F'"' '{print $2}')
        else
          SUSVER="unknown"
        fi
        echo "SUSVER=$SUSVER" >> $GITHUB_ENV
    
    - name: Apply Hide Stuff Patches
      shell: bash
      run: |
        set -e
        cd "$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common"
        cp ../../SukiSU_patch/69_hide_stuff.patch ./
        echo "Applying hide apps patch"
        patch -p1 -F 3 < 69_hide_stuff.patch || true
        echo "Hide apps patch completed"
    
    - name: Apply HOOK
      shell: bash
      run: |
        set -e
        cd "$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common"
        case "${{ inputs.hook }}" in
          kprobe)
            echo "Using kprobe hook"
            ;;
          manual)
            echo "Using manual hook"
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
            ;;
          tracepoint)
            echo "Using tracepoint hook"
            cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch ./
            patch -p1 -F 3 < tracepoint_hooks.patch
            ;;
        esac
    
    - name: Add Configuration Settings
      shell: bash
      run: |
        set -e
        CONFIG_FILE="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common/arch/arm64/configs/gki_defconfig"
        echo "# --- SukiSU Ultra Core Configs ---" >> "$CONFIG_FILE"
        echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
        if [ "${{ inputs.kpm }}" = "true" ]; then
          echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
        fi
        case "${{ inputs.hook }}" in
          kprobe)
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
            echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> "$CONFIG_FILE"
            ;;
          manual)
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
            ;;
          tracepoint)
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> "$CONFIG_FILE"
            ;;
        esac
        {
          echo "CONFIG_KSU_SUSFS=y"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
        } >> "$CONFIG_FILE"

    - name: Add Network & TTL Configs
      shell: bash
      run: |
        set -e
        CFG="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common/arch/arm64/configs/gki_defconfig"
        {
          echo ""
          echo "# --- Network performance configs ---"
          echo "CONFIG_TCP_CONG_ADVANCED=y"
          echo "CONFIG_TCP_CONG_BBR=y"
          echo "CONFIG_TCP_CONG_BIC=n"
          echo "CONFIG_TCP_CONG_WESTWOOD=n"
          echo "CONFIG_TCP_CONG_HTCP=n"
          echo "CONFIG_NET_SCH_FQ=y"
          echo "CONFIG_NET_SCH_FQ_CODEL=y"
          echo "CONFIG_IP_ECN=y"
          echo "CONFIG_TCP_ECN=y"
          echo "CONFIG_IPV6_ECN=y"
          echo "CONFIG_IP_NF_TARGET_ECN=y"
          echo "CONFIG_IP_NF_TARGET_TTL=y"
          echo "CONFIG_IP6_NF_TARGET_HL=y"
          echo "CONFIG_IP6_NF_MATCH_HL=y"
        } >> "$CFG"
        sed -i -e '/CONFIG_NET_SCH_FQ_CODEL=/d' -e '$aCONFIG_NET_SCH_FQ_CODEL=y' "$CFG"
    
    - name: Add Build Optimization Configs
      shell: bash
      run: |
        set -e
        CFG="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common/arch/arm64/configs/gki_defconfig"
        {
          echo ""
          echo "# --- Build optimization configs ---"
          echo "CONFIG_LTO_CLANG_THIN=y"
          echo "CONFIG_LTO_CLANG=y"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n"
          echo "CONFIG_OPTIMIZE_INLINING=y"
          echo "CONFIG_DEBUG_KERNEL=n"
          echo "CONFIG_DYNAMIC_DEBUG=n"
          echo "CONFIG_DEBUG_INFO=n"
          echo "CONFIG_DAMON=n"
          echo "CONFIG_CRYPTO_SHA1_ARM64_CE=y"
          echo "CONFIG_VIRTIO_PCI_LEGACY=y"
          echo "CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y"
          echo "CONFIG_HEADERS_INSTALL=n"
          echo "CONFIG_PROC_MEM_ALWAYS_FORCE=n"
        } >> "$CFG"
    
    - name: Save Build Metadata
      id: save_metadata
      shell: bash
      run: |
        set -e
        CONFIG_DIR="$GITHUB_WORKSPACE/${CONFIG}"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        cd "$CONFIG_DIR/kernel_platform/common"
        CONFIG_FILES=("build.config.common" "build.config.constants")
        BRANCH_LINE=""
        for f in "${CONFIG_FILES[@]}"; do
          if [ -f "$f" ]; then
            line=$(grep '^[[:space:]]*BRANCH=' "$f" | head -n1 || true)
            if [ -n "$line" ]; then BRANCH_LINE="$line"; break; fi
          fi
        done
        if [ -z "$BRANCH_LINE" ]; then
          echo "Error: BRANCH= not found in config files"
          exit 1
        fi
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        if [ -z "$ANDROID_VERSION" ]; then
          echo "Error parsing ANDROID_VERSION"
          exit 1
        fi
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        echo "Kernel Version: $ANDROID_VERSION-$FULL_VERSION"
        echo "ANDROID_VER=$ANDROID_VERSION" >> $GITHUB_ENV
        cd "$ARTIFACTS_DIR"
        echo "$ANDROID_VERSION-$FULL_VERSION" > "${CONFIG}.txt"
    
    - name: Detect Clang Version
      shell: bash
      run: |
        set -e
        KERNEL_PATH="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform"
        DEFCONFIG="$KERNEL_PATH/common/arch/arm64/configs/gki_defconfig"
        BUILDCONFIG="$KERNEL_PATH/common/build.config.gki"
        CONSTANTSCONFIG="$KERNEL_PATH/common/build.config.constants"
        CLANG_VERSION=""
        CLANG_BIN_PATH=""
        if grep -q '^CONFIG_CLANG_VERSION=' "$DEFCONFIG" 2>/dev/null; then
          CLANG_VERSION=$(grep '^CONFIG_CLANG_VERSION=' "$DEFCONFIG" | head -n1 | cut -d'=' -f2 | tr -d '"' | xargs)
        elif grep -q '^CLANG_VERSION=' "$BUILDCONFIG" 2>/dev/null; then
          CLANG_VERSION=$(grep '^CLANG_VERSION=' "$BUILDCONFIG" | head -n1 | cut -d'=' -f2 | xargs)
        elif grep -q '^CLANG_VERSION=' "$CONSTANTSCONFIG" 2>/dev/null; then
          CLANG_VERSION="clang-$(grep '^CLANG_VERSION=' "$CONSTANTSCONFIG" | head -n1 | cut -d'=' -f2 | xargs)"
        fi
        if [ -z "$CLANG_VERSION" ]; then
          for base in "$KERNEL_PATH/prebuilts" "$KERNEL_PATH/prebuilts-master"; do
            if [ -d "$base/clang/host/linux-x86" ]; then
              CLANG_VERSION=$(ls -d "$base"/clang/host/linux-x86/clang-r*/ 2>/dev/null | tail -n1 | xargs basename)
              CLANG_BIN_PATH="$base/clang/host/linux-x86/$CLANG_VERSION/bin"
            fi
          done
          [ -z "$CLANG_VERSION" ] && CLANG_VERSION="clang"
        else
          if [ -d "$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION" ]; then
            CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin"
          elif [ -d "$KERNEL_PATH/prebuilts-master/clang/host/linux-x86/$CLANG_VERSION" ]; then
            CLANG_BIN_PATH="$KERNEL_PATH/prebuilts-master/clang/host/linux-x86/$CLANG_VERSION/bin"
          fi
        fi
        echo "Detected CLANG_VERSION: $CLANG_VERSION"
        echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
        echo "CLANG_BIN_PATH=$CLANG_BIN_PATH" >> $GITHUB_ENV
    
    - name: Build Kernel
      shell: bash
      run: |
        set -euo pipefail
        KERNEL_PATH="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform"
        COMMON_DIR="$KERNEL_PATH/common"
        OUT_DIR="$COMMON_DIR/out"
        cd "$COMMON_DIR"
        echo "=== Toolchain Detection ==="
        if [[ -n "${CLANG_BIN_PATH:-}" && -x "${CLANG_BIN_PATH}/clang" ]]; then
          export PATH="${CLANG_BIN_PATH}:$PATH"
          echo "Using prebuilt clang: $(command -v clang)"
        else
          if command -v clang >/dev/null 2>&1; then
            echo "Using system clang: $(command -v clang)"
          else
            echo "ERROR: clang not found"; exit 1
          fi
        fi
        clang --version || true
        JOBS=$(nproc)
        export LLVM=1 ARCH=arm64 SUBARCH=arm64
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip
        export HOSTCC=clang HOSTCXX=clang++
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androidkernel-
        export KCFLAGS="-O2 -pipe -Wno-error -fno-stack-protector"
        export KCPPFLAGS="-DCONFIG_OPTIMIZE_INLINING"
        mkdir -p "$OUT_DIR"
        echo "=== Generate base defconfig ==="
        make -j"$JOBS" O="$OUT_DIR" gki_defconfig
        echo "=== olddefconfig sync ==="
        make O="$OUT_DIR" olddefconfig
        echo "=== Apply LOCALVERSION ==="
        scripts/config --file "$OUT_DIR/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
        scripts/config --file "$OUT_DIR/.config" -d LOCALVERSION_AUTO || true
        : > .scmversion
        make O="$OUT_DIR" olddefconfig
        grep '^CONFIG_LOCALVERSION=' "$OUT_DIR/.config" || true
        BUILD_DAY_UTC=$(date -u +%Y-%m-%d)
        export SOURCE_DATE_EPOCH=$(date -u -d "${BUILD_DAY_UTC} 00:00:00" +%s)
        export KBUILD_BUILD_TIMESTAMP="$(date -u -d "@$SOURCE_DATE_EPOCH" '+%a %b %d 00:00:00 %Z %Y')"
        export KBUILD_BUILD_USER=builder
        export KBUILD_BUILD_HOST=github
        echo "=== Build Kernel ==="
        START_TS=$(date +%s)
        make -j"$JOBS" O="$OUT_DIR"
        END_TS=$(date +%s)
        echo "Build time: $((END_TS-START_TS)) seconds"
        IMAGE="$OUT_DIR/arch/arm64/boot/Image"
        if [[ ! -f "$IMAGE" ]]; then
          echo "ERROR: Kernel Image missing"
          exit 1
        fi
        file "$IMAGE" || true
        du -h "$IMAGE" || true
        sha256sum "$IMAGE" | tee "$OUT_DIR/Image.sha256"
        cp "$OUT_DIR/.config" "$OUT_DIR/config.final"
        echo "kernelrelease: $(make -s O="$OUT_DIR" kernelrelease)"
    
    - name: Apply patch_linux and replace Image (KPM only)
      if: ${{ inputs.kpm == true }}
      shell: bash
      run: |
        set -e
        FINAL_DIR="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common/out/Final-Image-Find"
        IMAGE_SRC="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common/out/arch/arm64/boot/Image"
        mkdir -p "$FINAL_DIR"
        cp "$IMAGE_SRC" "$FINAL_DIR/Image"
        cd "$FINAL_DIR"
        curl -LO --retry 5 --retry-delay 2 --retry-connrefused \
          https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
        chmod +x patch_linux
        ./patch_linux || { echo "patch_linux failed (continuing with original Image)"; }
        if [[ -f oImage ]]; then
          rm -f Image
          mv oImage Image
        fi
        cp Image "$GITHUB_WORKSPACE/AnyKernel3/Image"
    
    - name: Create Flashable ZIP
      id: create_zip
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_DIR="$GITHUB_WORKSPACE/${CONFIG}"
        KERNEL_PATH="$CONFIG_DIR/kernel_platform"
        COMMON_OUT="$KERNEL_PATH/common/out"
        IMAGE_PATH="$GITHUB_WORKSPACE/AnyKernel3/Image"
        if [[ ! -f "$IMAGE_PATH" ]]; then
          IMAGE_SRC="$COMMON_OUT/arch/arm64/boot/Image"
          cp "$IMAGE_SRC" "$GITHUB_WORKSPACE/AnyKernel3/Image"
          IMAGE_PATH="$GITHUB_WORKSPACE/AnyKernel3/Image"
        fi
        if [[ ! -f "$IMAGE_PATH" ]]; then
          echo "ERROR: Final Image not found"
          exit 1
        fi
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        ZIP_NAME="AnyKernel3_${{ inputs.model }}_${KANDROID_VERSION}-${KERNEL_VERSION}_SukiSU_${KSUVER}_SUSFS_${SUSVER}.zip"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        echo "Creating zip: $ZIP_NAME"
        zip -r "$ARTIFACTS_DIR/$ZIP_NAME" ./*
    
    - name: Upload Artifacts
      if: success() && steps.create_zip.conclusion == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: |
          ${{ env.CONFIG }}/artifacts/*
