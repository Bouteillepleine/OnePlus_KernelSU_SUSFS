name: Build

permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  KSU_META:
    description: 'SukiSU Ultra branch/custom (format: branch/customTag or branch)'
    required: false
    type: string
    default: 'susfs-main/⚡Ultra⚡'
  KPM:
    description: 'Apply KPM patch to final Image'
    required: false
    type: boolean
    default: true
  HOOK:
    description: 'Hook type'
    required: false
    type: choice
    default: manual
    options:
      - kprobe
      - manual
      - tracepoint
  optimize_level:
    required: false
    type: choice
    default: O2
    options:
      - O2
      - O3
  localversion_suffix:
    required: false
    type: string
    default: ⚡Ultra⚡
  susfs_commit_hash_or_branch:
    required: false
    type: string
    default: ""

outputs:
  kernel_version:
    value: ${{ steps.save_metadata.outputs.kernel_version }}
  ksu_version:
    value: ${{ steps.save_metadata.outputs.ksu_version }}
  susfs_version:
    value: ${{ steps.save_metadata.outputs.susfs_version }}
  image_sha256:
    value: ${{ steps.collect_stats.outputs.image_sha256 }}
  warnings:
    value: ${{ steps.collect_stats.outputs.warnings }}

runs:
  using: composite
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        set -euo pipefail
        if [[ -z '${{ inputs.model }}' ]]; then
          echo "Input model cannot be empty"; exit 1
        fi
        if [[ -z '${{ inputs.branch }}' && -z '${{ inputs.soc }}' ]]; then
          echo "Either branch or soc must be set"; exit 1
        fi
        echo "Inputs validated."

    - name: Install Minimal Dependencies
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Dependencies"
        sudo apt-get -o Acquire::Retries=3 update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          git curl ca-certificates build-essential clang lld flex bison \
          libelf-dev libssl-dev libncurses-dev zlib1g-dev liblz4-tool \
          libxml2-utils rsync unzip dwarves file python3 bc patch xz-utils
        sudo apt-get clean
        echo "::endgroup::"

    - name: Setup Base Environment
      shell: bash
      run: |
        set -euo pipefail
        CONFIG='${{ inputs.model }}'
        echo "CONFIG=$CONFIG" >> "$GITHUB_ENV"
        mkdir -p "$HOME/.local/bin"
        REPO="$HOME/.local/bin/repo"
        if [ ! -x "$REPO" ]; then
          curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo -o "$REPO"
          chmod 0755 "$REPO"
        fi
        echo "$HOME/.local/bin" >> "$GITHUB_PATH"
        echo "REPO=$REPO" >> "$GITHUB_ENV"

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        set -euo pipefail
    
        CONFIG='${{ inputs.model }}'
        MANIFEST_INPUT='${{ inputs.manifest }}'
        SOC_INPUT='${{ inputs.soc }}'
        BRANCH_INPUT='${{ inputs.branch }}'
    
        mkdir -p "$CONFIG"
        cd "$CONFIG"
    
        echo "== Manifest resolution =="
        echo "Raw manifest input: $MANIFEST_INPUT"
    
        # Decide if input is a remote URL
        if [[ "$MANIFEST_INPUT" == http://* || "$MANIFEST_INPUT" == https://* ]]; then
          echo "Manifest is a remote URL. Downloading..."
          mkdir -p .repo/manifests
          curl --fail --show-error --location "$MANIFEST_INPUT" -o .repo/manifests/temp_manifest.xml
          MANIFEST_FILE="temp_manifest.xml"
        else
          # Treat as local path. Search common locations.
            # 1. As given (relative to repo root) via $GITHUB_WORKSPACE
            # 2. .github/manifests/<name>
            # 3. Already inside CONFIG (user pre-copied)
          CANDIDATES=(
            "$GITHUB_WORKSPACE/$MANIFEST_INPUT"
            "$GITHUB_WORKSPACE/.github/manifests/$MANIFEST_INPUT"
            "$PWD/$MANIFEST_INPUT"
          )
          FOUND=""
          for c in "${CANDIDATES[@]}"; do
            if [ -f "$c" ]; then
              FOUND="$c"
              break
            fi
          done
          if [ -z "$FOUND" ]; then
            echo "ERROR: Manifest file '$MANIFEST_INPUT' not found."
            echo "Searched:"
            printf '  - %s\n' "${CANDIDATES[@]}"
            echo "Listing *.xml in top 3 levels for debug:"
            find "$GITHUB_WORKSPACE" -maxdepth 3 -type f -name '*.xml' -printf '%P\n' || true
            exit 1
          fi
          echo "Found manifest at: $FOUND"
          mkdir -p .repo/manifests
          cp "$FOUND" .repo/manifests/temp_manifest.xml
          MANIFEST_FILE="temp_manifest.xml"
        fi

    # Choose branch: allow soc to override if provided and non-empty
    if [[ -n "$SOC_INPUT" ]]; then
      BRANCH_CHOSEN="oneplus/$SOC_INPUT"
    else
      BRANCH_CHOSEN="$BRANCH_INPUT"
    fi
    echo "Using branch: $BRANCH_CHOSEN"
    echo "Using manifest file: $MANIFEST_FILE"

    REPO='${{ env.REPO }}'
    if [ ! -x "$REPO" ]; then
      echo "ERROR: repo tool not found at $REPO"
      exit 1
    fi

    # Initialize
    "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git \
      -b "$BRANCH_CHOSEN" -m "$MANIFEST_FILE" \
      --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags

    "$REPO" --version

    # Sync with retry
    attempt=0
    until "$REPO" sync -c --no-clone-bundle --no-tags --optimized-fetch -j"$(nproc --all)" --fail-fast; do
      attempt=$((attempt+1))
      if [ $attempt -ge 3 ]; then
        echo "repo sync failed after $attempt attempts"
        exit 1
      fi
      echo "Retrying repo sync ($attempt)..."
      sleep 25
    done

    echo "Repo sync completed successfully."


    - name: Extract Version Info
      id: versions
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform/common"
        BRANCH_LINE=$( (grep -m1 '^[[:space:]]*BRANCH=' build.config.common || grep -m1 '^[[:space:]]*BRANCH=' build.config.constants || true) )
        if [ -z "$BRANCH_LINE" ]; then
          echo "Could not locate BRANCH= in build config"; exit 1
        fi
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VER="${BRANCH_VALUE%-*}"
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        KERNEL_MAJOR_MINOR="$VERSION.$PATCHLEVEL"
        KERNEL_FULL="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        COMBINED_VERSION="${ANDROID_VER}-${KERNEL_FULL}"
        SUSFS_BRANCH="gki-${ANDROID_VER}-${KERNEL_MAJOR_MINOR}"
        echo "ANDROID_VER=$ANDROID_VER" >> "$GITHUB_ENV"
        echo "KERNEL_MAJOR_MINOR=$KERNEL_MAJOR_MINOR" >> "$GITHUB_ENV"
        echo "KERNEL_FULL=$KERNEL_FULL" >> "$GITHUB_ENV"
        echo "COMBINED_VERSION=$COMBINED_VERSION" >> "$GITHUB_ENV"
        echo "SUSFS_BRANCH=$SUSFS_BRANCH" >> "$GITHUB_ENV"
        echo "android_ver=$ANDROID_VER" >> "$GITHUB_OUTPUT"
        echo "kernel_major_minor=$KERNEL_MAJOR_MINOR" >> "$GITHUB_OUTPUT"
        echo "kernel_full=$KERNEL_FULL" >> "$GITHUB_OUTPUT"
        echo "combined_version=$COMBINED_VERSION" >> "$GITHUB_OUTPUT"
        echo "susfs_branch=$SUSFS_BRANCH" >> "$GITHUB_OUTPUT"

    - name: Clone AnyKernel3 (Pinned)
      shell: bash
      run: |
        set -euo pipefail
        PINNED_ANYKERNEL3_COMMIT="HEAD"
        git clone --depth=1 https://github.com/Bouteillepleine/AnyKernel3.git -b gki-2.0 AnyKernel3
        cd AnyKernel3
        if [ "$PINNED_ANYKERNEL3_COMMIT" != "HEAD" ]; then
          git fetch --depth=1 origin "$PINNED_ANYKERNEL3_COMMIT"
          git checkout "$PINNED_ANYKERNEL3_COMMIT"
        fi
        rm -rf .git

    - name: Add SukiSU Ultra
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        META='${{ inputs.KSU_META }}'
        BRANCH_NAME="${META%%/*}"
        CUSTOM_TAG="${META#*/}"
        if [ "$BRANCH_NAME" = "$CUSTOM_TAG" ]; then
          CUSTOM_TAG=""
        fi
        curl -fsSL -o setup.sh https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh
        bash setup.sh "$BRANCH_NAME"
        cd KernelSU
        KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" \
          | grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
        MIN_API="3.1.7"
        if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "$MIN_API" | sort -V | head -n1)" != "$MIN_API" ]]; then
          KSU_API_VERSION="$MIN_API"
        fi
        GIT_HASH=$(git rev-parse --short HEAD)
        if [ -z "$CUSTOM_TAG" ]; then
          KSU_VERSION_FULL="v${KSU_API_VERSION}-${GIT_HASH}@${BRANCH_NAME}"
        else
          KSU_VERSION_FULL="v${KSU_API_VERSION}-${CUSTOM_TAG}@${BRANCH_NAME}[${GIT_HASH}]"
        fi
        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
        {
          echo "define get_ksu_version_full"
          echo "$KSU_VERSION_FULL"
          echo "endef"
          echo "KSU_VERSION_API := $KSU_API_VERSION"
          echo "KSU_VERSION_FULL := $KSU_VERSION_FULL"
        } >> kernel/Makefile
        KSU_BUILD_ID=$(expr $(git rev-list --count HEAD 2>/dev/null || echo 13000) + 10000)
        echo "KSU_VERSION_FULL=$KSU_VERSION_FULL" >> "$GITHUB_ENV"
        echo "KSU_BUILD_ID=$KSU_BUILD_ID" >> "$GITHUB_ENV"
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> "$GITHUB_ENV"

    - name: Apply SUSFS Patches
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG"
        SUSFS_REF='${{ inputs.susfs_commit_hash_or_branch }}'
        if [ -z "$SUSFS_REF" ]; then
          SUSFS_REF="${SUSFS_BRANCH}"
        fi
        git clone https://gitlab.com/simonpunk/susfs4ksu.git susfs4ksu
        cd susfs4ksu
        if git rev-parse --verify "origin/$SUSFS_REF" >/dev/null 2>&1; then
          git checkout "$SUSFS_REF"
        else
          echo "SUSFS ref $SUSFS_REF not found"; exit 1
        fi
        cd ..
        cp susfs4ksu/kernel_patches/50_add_susfs_in_${SUSFS_BRANCH}.patch kernel_platform/common/ || true
        cp susfs4ksu/kernel_patches/fs/* kernel_platform/common/fs/ 2>/dev/null || true
        cp susfs4ksu/kernel_patches/include/linux/* kernel_platform/common/include/linux/ 2>/dev/null || true
        if [ -f "kernel_platform/common/50_add_susfs_in_${SUSFS_BRANCH}.patch" ]; then
          cd kernel_platform/common
          patch -p1 < "50_add_susfs_in_${SUSFS_BRANCH}.patch"
        else
          echo "Warning: SUSFS patch file not found (continuing)."
        fi
        if grep -q 'SUSFS_VERSION' kernel_platform/common/include/linux/susfs.h 2>/dev/null; then
          :
        fi
        SUSFS_VERSION=$(grep -m1 '#define SUSFS_VERSION' kernel_platform/common/include/linux/susfs.h 2>/dev/null | awk -F'"' '{print $2}')
        [ -z "$SUSFS_VERSION" ] && SUSFS_VERSION="unknown"
        echo "SUSFS_VERSION=$SUSFS_VERSION" >> "$GITHUB_ENV"

    - name: Apply Hide Stuff Patch
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG"
        git clone https://github.com/ShirkNeko/SukiSU_patch.git SukiSU_patch
        cd kernel_platform/common
        cp ../../SukiSU_patch/69_hide_stuff.patch .
        patch -p1 < 69_hide_stuff.patch

    - name: Apply Hook Type Patch
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform/common"
        case '${{ inputs.HOOK }}' in
          manual)
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch .
            patch -p1 < syscall_hooks.patch
            ;;
          tracepoint)
            cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch .
            patch -p1 < tracepoint_hooks.patch
            ;;
          kprobe)
            echo "kprobe hook selected (no extra patch)."
            ;;
          *)
            echo "Invalid HOOK choice"; exit 1
            ;;
        esac

    - name: Apply hmbird Patch (6.6 only)
      if: ${{ steps.versions.outputs.kernel_major_minor == '6.6' }}
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform/common"
        curl -fsSL -o hmbird_patch.patch https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/hmbird_patch.patch
        grep -q 'hmbird_patch.o' drivers/Makefile || echo 'obj-y += hmbird_patch.o' >> drivers/Makefile
        patch -p1 < hmbird_patch.patch || { echo "hmbird patch failed"; exit 1; }

    - name: Reset Base gki_defconfig
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform/common"
        if git ls-files --error-unmatch arch/arm64/configs/gki_defconfig >/dev/null 2>&1; then
          git checkout -- arch/arm64/configs/gki_defconfig
        fi

    - name: Append Kernel Config (KSU / SUSFS / Hook)
      shell: bash
      run: |
        set -euo pipefail
        DEF="$CONFIG/kernel_platform/common/arch/arm64/configs/gki_defconfig"
        [ -f "$DEF" ] || { echo "Missing gki_defconfig"; exit 1; }
        {
          echo "CONFIG_KSU=y"
          if [[ '${{ inputs.KPM }}' == 'true' ]]; then
            echo "CONFIG_KPM=y"
          fi
          case '${{ inputs.HOOK }}' in
            kprobe)
              echo "CONFIG_KPROBES=y"
              echo "CONFIG_KSU_KPROBES_HOOK=y"
              ;;
            manual)
              echo "CONFIG_KSU_MANUAL_HOOK=y"
              ;;
            tracepoint)
              echo "CONFIG_KSU_TRACEPOINT_HOOK=y"
              ;;
          esac
          cat <<'EOF'
        CONFIG_KSU_SUSFS=y
        CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_PATH=y
        CONFIG_KSU_SUSFS_SUS_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_KSTAT=y
        CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
        CONFIG_KSU_SUSFS_TRY_UMOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SPOOF_UNAME=y
        CONFIG_KSU_SUSFS_ENABLE_LOG=y
        CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
        CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
        CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
        CONFIG_TMPFS_XATTR=y
        CONFIG_TMPFS_POSIX_ACL=y
        EOF
        } >> "$DEF"

    - name: Add Network / Performance Config
      shell: bash
      run: |
        set -euo pipefail
        DEF="$CONFIG/kernel_platform/common/arch/arm64/configs/gki_defconfig"
        {
          cat <<'EOF'
        CONFIG_TCP_CONG_ADVANCED=y
        CONFIG_TCP_CONG_BBR=y
        CONFIG_NET_SCH_FQ=y
        CONFIG_NET_SCH_FQ_CODEL=y
        CONFIG_IP_ECN=y
        CONFIG_TCP_ECN=y
        CONFIG_IPV6_ECN=y
        CONFIG_IP_NF_TARGET_TTL=y
        CONFIG_IP6_NF_TARGET_HL=y
        CONFIG_IP6_NF_MATCH_HL=y
        CONFIG_LTO_CLANG_THIN=y
        CONFIG_LTO_CLANG=y
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n
        CONFIG_OPTIMIZE_INLINING=y
        CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y
        CONFIG_DEBUG_KERNEL=n
        CONFIG_DYNAMIC_DEBUG=n
        CONFIG_DEBUG_INFO=n
        CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y
        EOF
        } >> "$DEF"

    - name: Add sched_ext (6.6 only)
      if: ${{ steps.versions.outputs.kernel_major_minor == '6.6' }}
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        git clone --depth=1 https://github.com/HanKuCha/sched_ext.git
        cp -r sched_ext/* common/kernel/sched/
        rm -rf sched_ext

    - name: Patch Reject Check
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        rej=$(find . -name '*.rej' | wc -l)
        if [ "$rej" -gt 0 ]; then
          echo "ERROR: $rej patch rejects found:"
          find . -name '*.rej'
          exit 1
        fi
        echo "No patch rejects."

    - name: Branding / LocalVersion
      shell: bash
      run: |
        set -euo pipefail
        SUFFIX='${{ inputs.localversion_suffix }}'
        CUSTOM_LOCALVERSION="-${ANDROID_VER}-${KERNEL_MAJOR_MINOR}-${SUFFIX}"
        echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"

    - name: Save Build Metadata
      id: save_metadata
      shell: bash
      run: |
        set -euo pipefail
        ARTIFACTS_DIR="$CONFIG/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        echo "${COMBINED_VERSION}" > "$ARTIFACTS_DIR/${{ inputs.model }}.txt"
        echo "kernel_version=${COMBINED_VERSION}" >> "$GITHUB_OUTPUT"
        echo "ksu_version=${KSU_VERSION_FULL}" >> "$GITHUB_OUTPUT"
        echo "susfs_version=${SUSFS_VERSION}" >> "$GITHUB_OUTPUT"

    - name: Detect Clang
      shell: bash
      run: |
        set -euo pipefail
        KP="$CONFIG/kernel_platform"
        CLANG_BIN=""
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          [ -d "$base/clang/host/linux-x86" ] || continue
          latest=$(ls -d "$base"/clang/host/linux-x86/clang-r*/ 2>/dev/null | sort -V | tail -n1 || true)
          if [ -n "$latest" ]; then
            CLANG_BIN="$latest/bin"
          fi
        done
        if [ -z "$CLANG_BIN" ] && command -v clang >/dev/null 2>&1; then
          CLANG_BIN="$(dirname "$(command -v clang)")"
        fi
        [ -n "$CLANG_BIN" ] || { echo "No clang toolchain found"; exit 1; }
        echo "CLANG_BIN_PATH=$CLANG_BIN" >> "$GITHUB_ENV"
        echo "CLANG_VERSION=$("$CLANG_BIN/clang" --version | head -n1)" >> "$GITHUB_ENV"

    - name: Build Kernel
      shell: bash
      run: |
        set -euo pipefail
        COMMON="$CONFIG/kernel_platform/common"
        cd "$COMMON"
        : > .scmversion
        if [ -n "${CLANG_BIN_PATH:-}" ]; then
          export PATH="${CLANG_BIN_PATH}:$PATH"
        fi
        export LLVM=1 LLVM_IAS=1
        export ARCH=arm64 SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androideabi-
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++
        export CC=clang
        OUT=out
        mkdir -p "$OUT"
        make O="$OUT" gki_defconfig
        if [ -n "${CUSTOM_LOCALVERSION:-}" ]; then
          scripts/config --file "$OUT/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
          scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO || true
        fi
        if [ '${{ inputs.optimize_level }}' = "O3" ]; then
          scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE
          scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
          export KCFLAGS="-Wno-error -pipe -O3 -fno-stack-protector"
        else
          scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE
          scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
          export KCFLAGS="-Wno-error -pipe -O2 -fno-stack-protector"
        fi
        export KCPPFLAGS="-DCONFIG_OPTIMIZE_INLINING"
        make O="$OUT" olddefconfig
        echo "Building kernel..."
        make -j"$(nproc --all)" O="$OUT" 2>&1 | tee build.log
        IMG="$OUT/arch/arm64/boot/Image"
        [ -f "$IMG" ] || { echo "Kernel Image missing"; exit 1; }
        sha256sum "$IMG" | tee "$OUT/Image.sha256"
        echo "FINAL_IMAGE_PATH=$IMG" >> "$GITHUB_ENV"

    - name: Apply KPM Patch (Optional)
      if: ${{ inputs.KPM }}
      shell: bash
      run: |
        set -euo pipefail
        OUT="$CONFIG/kernel_platform/common/out"
        IMG="$OUT/arch/arm64/boot/Image"
        FINAL_DIR="$OUT/Final"
        mkdir -p "$FINAL_DIR"
        cp "$IMG" "$FINAL_DIR/Image"
        cd "$FINAL_DIR"
        curl -fsSL -o patch_linux https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
        chmod +x patch_linux
        if ./patch_linux; then
          if [ -f oImage ]; then mv oImage Image; fi
          echo "KPM patch applied."
        else
          echo "KPM patch failed; using original Image."
        fi
        echo "FINAL_IMAGE_PATH=$FINAL_DIR/Image" >> "$GITHUB_ENV"

    - name: Stage Image for Packaging
      shell: bash
      run: |
        set -euo pipefail
        [ -f "${FINAL_IMAGE_PATH}" ] || { echo "Final image not found at ${FINAL_IMAGE_PATH}"; exit 1; }
        cp "${FINAL_IMAGE_PATH}" AnyKernel3/Image

    - name: Collect Build Stats / Validate Image
      id: collect_stats
      shell: bash
      run: |
        set -euo pipefail
        IMG="${FINAL_IMAGE_PATH}"
        COMMON="$CONFIG/kernel_platform/common"
        OUT="$COMMON/out"
        WARNINGS=$(grep -i 'warning:' "$COMMON/build.log" 2>/dev/null | grep -v '0 warnings' | wc -l || true)
        echo "$WARNINGS" > "$OUT/warnings.txt"
        if [ ! -f "$IMG" ]; then
          echo "ERROR: Final Image not found"; exit 1
        fi
        file "$IMG" > "$OUT/Image.file"
        if KERNEL_UNAME_LINE=$(strings "$IMG" 2>/dev/null | grep -E -m1 'Linux version'); then
          KERNEL_UNAME="$KERNEL_UNAME_LINE"
        else
          KERNEL_UNAME="(unknown)"
        fi
        echo "KERNEL_UNAME=$KERNEL_UNAME" >> "$GITHUB_ENV"
        MIN_SIZE=$((6 * 1024 * 1024))
        ACTUAL_SIZE=$(stat -c %s "$IMG")
        if [ "$ACTUAL_SIZE" -lt "$MIN_SIZE" ]; then
          echo "WARNING: Image size ($ACTUAL_SIZE) below expected minimum ($MIN_SIZE); continuing but flagging."
        fi
        if [ -f "$OUT/Image.sha256" ]; then
          IMAGE_SHA256=$(cut -d' ' -f1 "$OUT/Image.sha256")
        else
          IMAGE_SHA256=$(sha256sum "$IMG" | cut -d' ' -f1)
        fi
        echo "warnings=$WARNINGS" >> "$GITHUB_OUTPUT"
        echo "image_sha256=$IMAGE_SHA256" >> "$GITHUB_OUTPUT"

    - name: Create Flashable ZIP
      id: create_zip
      shell: bash
      run: |
        set -euo pipefail
        ART="$CONFIG/artifacts"
        mkdir -p "$ART"
        cd AnyKernel3
        ZIP="AnyKernel3_${{ inputs.model }}_${COMBINED_VERSION}_SukiSU_${KSU_VERSION_FULL}_SUSFS_${SUSFS_VERSION}.zip"
        rm -rf .git || true
        echo "Creating $ZIP"
        zip -r9 "$ZIP" ./* >/dev/null
        mv "$ZIP" "../$ART/"
        echo "Created artifact: $ART/$ZIP"

    - name: Final Build Summary
      shell: bash
      run: |
        set -euo pipefail
        {
          echo "Model: ${{ inputs.model }}"
          echo "Android: $ANDROID_VER"
          echo "Kernel Version: $COMBINED_VERSION"
          echo "Kernel Uname: ${KERNEL_UNAME}"
          echo "KSU Version: ${KSU_VERSION_FULL}"
          echo "SUSFS Version: ${SUSFS_VERSION}"
          echo "Optimization: ${{ inputs.optimize_level }}"
          echo "Image SHA256: ${{ steps.collect_stats.outputs.image_sha256 }}"
          echo "Warnings: ${{ steps.collect_stats.outputs.warnings }}"
        } | tee summary.txt
        {
          echo "### Kernel Build Summary"
          echo ""
          echo "- Model: ${{ inputs.model }}"
          echo "- Android: $ANDROID_VER"
          echo "- Kernel Version: $COMBINED_VERSION"
          echo "- Kernel Uname: ${KERNEL_UNAME}"
          echo "- KSU Version: ${KSU_VERSION_FULL}"
          echo "- SUSFS Version: ${SUSFS_VERSION}"
          echo "- Optimization: ${{ inputs.optimize_level }}"
          echo "- Image SHA256: ${{ steps.collect_stats.outputs.image_sha256 }}"
          echo "- Warnings: ${{ steps.collect_stats.outputs.warnings }}"
        } >> "$GITHUB_STEP_SUMMARY"

    - name: Upload Artifacts
      if: success() && steps.create_zip.conclusion == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ inputs.model }}
        path: ${{ inputs.model }}/artifacts/

    - name: Upload Logs (Always)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ inputs.model }}
        path: |
          ${{ inputs.model }}/kernel_platform/common/out/build.log
          ${{ inputs.model }}/kernel_platform/common/out/.config
          ${{ inputs.model }}/artifacts/${{ inputs.model }}.txt
        if-no-files-found: ignore
