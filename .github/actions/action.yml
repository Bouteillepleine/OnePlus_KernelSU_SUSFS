name: Build

permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_commit_hash_or_branch:
    required: false
    type: string
    default: ""
  KSU_META:
    description: 'SukiSU Ultra branch/custom)'
    required: false
    type: string
    default: 'susfs-main/⚡Ultra⚡'
  KPM:
    description: 'Enable KPM?'
    required: true
    type: boolean
    default: true
  HOOK:
    description: 'Hook type'
    required: false
    type: choice
    default: manual
    options:
      - kprobe
      - manual
      - tracepoint
  optimize_level:
    required: false
    type: string
    default: O2
  android_version:
    required: false
    type: string
    default: ""
  kernel_version:
    required: false
    type: string
    default: ""

outputs:
  kernel_version:
    value: ${{ steps.save_metadata.outputs.kernel_version }}
  ksu_version:
    value: ${{ steps.save_metadata.outputs.ksu_version }}
  susfs_version:
    value: ${{ steps.save_metadata.outputs.susfs_version }}
  image_sha256:
    value: ${{ steps.collect_stats.outputs.image_sha256 }}
  warnings:
    value: ${{ steps.collect_stats.outputs.warnings }}

runs:
  using: composite
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        set -euo pipefail
        model='${{ inputs.model }}'
        if [[ -z "$model" ]]; then
          echo "Empty model not allowed"
          exit 1
        fi
        echo "Input validation OK."

    - name: Install Minimal Dependencies
  shell: bash
  run: |
    set -euo pipefail
    echo "::group::Install deps"
    sudo apt-get -o Acquire::Retries=3 update -qq
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
      git curl ca-certificates build-essential clang lld flex bison \
      libelf-dev libssl-dev libncurses-dev zlib1g-dev liblz4-tool \
      libxml2-utils rsync unzip dwarves file python3 bc patch xz-utils
    sudo apt-get clean
    echo "::endgroup::"

- name: Setup Base Environment
  shell: bash
  run: |
    set -euo pipefail
    CONFIG='${{ inputs.model }}'
    echo "CONFIG=$CONFIG" >> "$GITHUB_ENV"
    REPO="/usr/local/bin/repo"
    if [ ! -x "$REPO" ]; then
      curl -s https://storage.googleapis.com/git-repo-downloads/repo -o "$REPO"
      chmod +x "$REPO"
    fi
    echo "REPO=$REPO" >> "$GITHUB_ENV"

- name: Initialize and Sync Kernel Source
  shell: bash
  run: |
    set -euo pipefail
    echo "Creating folder for configuration: $CONFIG"
    mkdir -p "$CONFIG"
    cd "$CONFIG"
    echo "Initializing and syncing kernel source..."
    if [[ "${{ inputs.manifest }}" == https://* ]]; then
      mkdir -p .repo/manifests
        curl --fail --show-error --location --proto '=https' \
        "${{ inputs.manifest }}" -o .repo/manifests/temp_manifest.xml
      "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git \
        -b oneplus/sm8650 -m temp_manifest.xml --repo-rev=v2.16 \
        --depth=1 --no-clone-bundle --no-tags
    else
      "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git \
        -b "${{ inputs.branch }}" -m "${{ inputs.manifest }}" \
        --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
    fi
    "$REPO" --version
    success=false
    for i in 1 2 3; do
      if "$REPO" sync -c --no-clone-bundle --no-tags --optimized-fetch \
         -j"$(nproc --all)" --fail-fast; then
        success=true
        break
      fi
      echo "repo sync attempt $i failed; retrying..."
      sleep 30
    done
    $success || { echo "repo sync failed after 3 attempts"; exit 1; }

- name: Get Kernel Version Info
  shell: bash
  run: |
    set -euo pipefail
    CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
    ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
    mkdir -p "$ARTIFACTS_DIR"
    cd "$CONFIG_DIR/kernel_platform/common"
    CONFIG_FILES=("build.config.common" "build.config.constants")
    BRANCH_LINE=""
    for f in "${CONFIG_FILES[@]}"; do
      if [ -f "$f" ]; then
        l=$(grep '^[[:space:]]*BRANCH=' "$f" || true)
        if [ -n "$l" ]; then BRANCH_LINE="$l"; break; fi
      fi
    done
    if [ -z "$BRANCH_LINE" ]; then
      echo "Error: No BRANCH= found"
      exit 1
    fi
    BRANCH_VALUE="${BRANCH_LINE#*=}"
    ANDROID_VERSION="${BRANCH_VALUE%-*}"
    if [ -z "$ANDROID_VERSION" ]; then
      echo "Could not parse android version from BRANCH=$BRANCH_VALUE"
      exit 1
    fi
    VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
    PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
    SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
    FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
    cd "$ARTIFACTS_DIR"
    echo "$ANDROID_VERSION-$FULL_VERSION" > "${{ inputs.model }}.txt"
    echo "ANDROID_VER=$ANDROID_VERSION" >> "$GITHUB_ENV"
    echo "KERNEL_VER=$VERSION.$PATCHLEVEL" >> "$GITHUB_ENV"
    echo "KERNEL_FULL_VER=$ANDROID_VERSION-$FULL_VERSION" >> "$GITHUB_ENV"
    echo "SUSFS_KERNEL_BRANCH=gki-$ANDROID_VERSION-$VERSION.$PATCHLEVEL" >> "$GITHUB_ENV"

- name: Clone AnyKernel3
  shell: bash
  run: |
    set -euo pipefail
    echo "Cloning AnyKernel3..."
    git clone https://github.com/Bouteillepleine/AnyKernel3.git -b gki-2.0

- name: Initialize and Sync Kernel Source (Second Pass)
  shell: bash
  run: |
    set -euo pipefail
    mkdir -p "${CONFIG}"
    cd "${CONFIG}"
    echo "Initializing kernel repo (second pass)..."
    if [[ "${{ inputs.manifest }}" == https://* ]]; then
      mkdir -p .repo/manifests
      curl -Ls "${{ inputs.manifest }}" -o .repo/manifests/temp_manifest.xml
      "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git \
        -b oneplus/${{ inputs.soc }} -m temp_manifest.xml \
        --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
    else
      "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git \
        -b ${{ inputs.branch }} -m ${{ inputs.manifest }} \
        --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
    fi
    "$REPO" --version
    "$REPO" --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j"$(nproc --all)" --fail-fast

- name: Clean Up ABI Protected Exports
  shell: bash
  run: |
    set -euo pipefail
    cd "$CONFIG/kernel_platform"
    rm -f common/android/abi_gki_protected_exports_* || true
    rm -f msm-kernel/android/abi_gki_protected_exports_* || true
    df -h

- name: Derive Kernel / Manifest Metadata
  shell: bash
  run: |
    set -euo pipefail
    cd "${CONFIG}/kernel_platform/common"
    if [[ "${{ inputs.manifest }}" == https://* ]]; then
      MANIFEST_BASENAME="temp_manifest.xml"
    else
      MANIFEST_BASENAME="${{ inputs.manifest }}"
    fi
    MANIFEST_PATH="$GITHUB_WORKSPACE/${CONFIG}/.repo/manifests/${MANIFEST_BASENAME}"
    echo "MANIFEST_PATH=$MANIFEST_PATH" >> "$GITHUB_ENV"
    V=$(grep '^VERSION *=' Makefile | awk '{print $3}')
    P=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
    S=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
    FULL="$V.$P.$S"
    echo "TKERNEL_VERSION=$FULL" >> "$GITHUB_ENV"
    echo "Full kernel version: $FULL"

- name: Branding
  shell: bash
  run: |
    set -euo pipefail
    CUSTOM_LOCALVERSION="-${ANDROID_VER}-${KERNEL_VER}-OP-⚡Ultra⚡"
    echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"

- name: Reset Base gki_defconfig
  shell: bash
  run: |
    set -euo pipefail
    cd "${CONFIG}/kernel_platform/common"
    if git ls-files --error-unmatch arch/arm64/configs/gki_defconfig >/dev/null 2>&1; then
      git checkout -- arch/arm64/configs/gki_defconfig
      echo "Restored pristine gki_defconfig"
    else
      echo "Warning: gki_defconfig not tracked (unexpected)."
    fi

- name: Add SukiSU Ultra
  shell: bash
  run: |
    set -euo pipefail
    cd "${CONFIG}/kernel_platform"
    META="${{ inputs.KSU_META }}"
    BRANCH_NAME="${META%%/*}"
    CUSTOM_TAG="${META#*/}"
    echo "Branch name: $BRANCH_NAME"
    echo "Custom version tag: $CUSTOM_TAG"
    curl -fLSs -o setup.sh "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh"
    bash setup.sh "$BRANCH_NAME"
    cd ./KernelSU
    KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
      grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
    if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
      KSU_API_VERSION="3.1.7"
    fi
    echo "KSU_API_VERSION=$KSU_API_VERSION" >> "$GITHUB_ENV"
    GIT_HASH=$(git rev-parse --short HEAD)
    if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
      KSU_VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@$BRANCH_NAME"
    else
      KSU_VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$GIT_HASH]"
    fi
    sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
    sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
    sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
    {
      echo "define get_ksu_version_full"
      echo "$KSU_VERSION_FULL"
      echo "endef"
      echo "KSU_VERSION_API := $KSU_API_VERSION"
      echo "KSU_VERSION_FULL := $KSU_VERSION_FULL"
    } >> kernel/Makefile
    echo "KSU_VERSION_FULL=$KSU_VERSION_FULL" >> "$GITHUB_ENV"
    KSU_BUILD_ID=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
    echo "KSU_BUILD_ID=$KSU_BUILD_ID" >> "$GITHUB_ENV"
    echo "::group::KernelSU version preview"
    grep -A6 "get_ksu_version_full" kernel/Makefile || true
    echo "::endgroup::"

- name: Apply Patches SukiSU Ultra
  shell: bash
  run: |
    set -euo pipefail
    cd "${CONFIG}"
    git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${ANDROID_VER}-${KERNEL_VER}
    git clone https://github.com/ShirkNeko/SukiSU_patch.git
    cd kernel_platform
    echo "Fetching susfs patches"
    cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${ANDROID_VER}-${KERNEL_VER}.patch ./common/ || true
    cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ 2>/dev/null || true
    cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ 2>/dev/null || true
    cd ./common
    GKI_V="${ANDROID_VER}-${KERNEL_VER}"
    SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')
    if [ "$GKI_V" == "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
      echo "Fixing bugs for older 5.15 sublevels"
      curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
      patch -p1 < fix_5.15.legacy.patch
      echo "fix_5.15_patch completed"
    fi
    if [ -f 50_add_susfs_in_gki-${ANDROID_VER}-${KERNEL_VER}.patch ]; then
      echo "Applying susfs patch"
      patch -p1 < 50_add_susfs_in_gki-${ANDROID_VER}-${KERNEL_VER}.patch || { echo "SUSFS patch failed"; exit 1; }
      echo "susfs_patch completed"
    else
      echo "Warning: SUSFS patch file not found."
    fi

- name: Record SUSFS Version
  shell: bash
  run: |
    set -euo pipefail
    cd "${CONFIG}/susfs4ksu"
    SUSVER_SHORT=$(git rev-parse --short HEAD || echo unknown)
    SUSFS_HUMAN_VERSION=$(grep -R -E -m1 'SUSFS_VERSION' . 2>/dev/null | sed -E 's/.*SUSFS_VERSION[^"]*"([^"]+)".*/\1/' || true)
    if [ -z "$SUSFS_HUMAN_VERSION" ]; then
      SUSFS_HUMAN_VERSION="v1.5.9"
    elif [[ "$SUSFS_HUMAN_VERSION" != v* ]]; then
      SUSFS_HUMAN_VERSION="v${SUSFS_HUMAN_VERSION}"
    fi
    echo "SUSVER=$SUSVER_SHORT" >> "$GITHUB_ENV"
    echo "SUSFS_HUMAN_VERSION=$SUSFS_HUMAN_VERSION" >> "$GITHUB_ENV"

- name: Apply Hide Stuff Patches
  shell: bash
  run: |
    set -euo pipefail
    cd "$CONFIG/kernel_platform/common"
    cp ../../SukiSU_patch/69_hide_stuff.patch ./
    patch -p1 -F 3 < 69_hide_stuff.patch

- name: Apply HOOK
  shell: bash
  run: |
    set -euo pipefail
    cd "$CONFIG/kernel_platform/common"
    case "${{ inputs.HOOK }}" in
      kprobe)
        echo "kprobe hook selected (no additional patch here)."
        ;;
      manual)
        cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
        patch -p1 -F 3 < syscall_hooks.patch
        ;;
      tracepoint)
        cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch ./
        patch -p1 -F 3 < tracepoint_hooks.patch
        ;;
    esac

- name: Convert HMBIRD_OGKI to HMBIRD_GKI (6.6 only)
  if: ${{ env.KERNEL_VER == '6.6' }}
  shell: bash
  run: |
    set -euo pipefail
    cd "${CONFIG}/kernel_platform/common"
    curl -fL -o hmbird_patch.patch https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/hmbird_patch.patch
    grep -q 'hmbird_patch.o' drivers/Makefile || echo 'obj-y += hmbird_patch.o' >> drivers/Makefile
    patch -p1 -F 3 < hmbird_patch.patch || echo "hmbird patch failed (non-fatal)"

- name: Add KernelSU / SUSFS Config
  shell: bash
  run: |
    set -euo pipefail
    if [ -z "$CONFIG" ] || [ ! -d "$CONFIG/kernel_platform" ]; then
      echo "Error: CONFIG invalid"
      exit 1
    fi
    cd "$CONFIG/kernel_platform"
    DEF="common/arch/arm64/configs/gki_defconfig"
    if [ ! -f "$DEF" ]; then
      echo "Error: $DEF not found"
      exit 1
    fi
    {
      echo "CONFIG_KSU=y"
      if [[ "${{ inputs.KPM }}" == "true" ]]; then
        echo "CONFIG_KPM=y"
      fi
      case "${{ inputs.HOOK }}" in
        kprobe)
          echo "CONFIG_KSU_SUSFS_SUS_SU=y"
          echo "CONFIG_KPROBES=y"
          echo "CONFIG_KSU_KPROBES_HOOK=y"
          ;;
        manual)
          echo "CONFIG_KSU_SUSFS_SUS_SU=n"
          echo "CONFIG_KSU_MANUAL_HOOK=y"
          ;;
        tracepoint)
          echo "CONFIG_KSU_SUSFS_SUS_SU=n"
          echo "CONFIG_KSU_TRACEPOINT_HOOK=y"
          ;;
        *)
          echo "Error: Invalid HOOK value: ${{ inputs.HOOK }}"
          exit 1
          ;;
      esac
      cat <<'EOF'
    CONFIG_KSU_SUSFS=y
    CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
    CONFIG_KSU_SUSFS_SUS_PATH=y
    CONFIG_KSU_SUSFS_SUS_MOUNT=y
    CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
    CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
    CONFIG_KSU_SUSFS_SUS_KSTAT=y
    CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
    CONFIG_KSU_SUSFS_TRY_UMOUNT=y
    CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
    CONFIG_KSU_SUSFS_SPOOF_UNAME=y
    CONFIG_KSU_SUSFS_ENABLE_LOG=y
    CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
    CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
    CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
    CONFIG_TMPFS_XATTR=y
    CONFIG_TMPFS_POSIX_ACL=y
    EOF
    } >> "$DEF"

- name: Add Oneplus BBR
  shell: bash
  run: |
    set -euo pipefail
    cd "$CONFIG/kernel_platform"
    cat >> common/arch/arm64/configs/gki_defconfig <<EOF
    CONFIG_TCP_CONG_ADVANCED=y
    CONFIG_TCP_CONG_BBR=y
    CONFIG_NET_SCH_FQ=y
    CONFIG_NET_SCH_FQ_CODEL=y
    CONFIG_IP_ECN=y
    CONFIG_TCP_ECN=y
    CONFIG_IPV6_ECN=y
    EOF

- name: Add TTL Target Support
  shell: bash
  run: |
    set -euo pipefail
    cd "$CONFIG/kernel_platform"
    cat >> common/arch/arm64/configs/gki_defconfig <<EOF
    CONFIG_IP_NF_TARGET_TTL=y
    CONFIG_IP6_NF_TARGET_HL=y
    CONFIG_IP6_NF_MATCH_HL=y
    EOF

- name: Add Build based configs
  shell: bash
  run: |
    set -euo pipefail
    cd "$CONFIG/kernel_platform"
    cat >> common/arch/arm64/configs/gki_defconfig <<EOF
    CONFIG_LTO_CLANG_THIN=y
    CONFIG_LTO_CLANG=y
    CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
    CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n
    CONFIG_OPTIMIZE_INLINING=y
    CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y
    CONFIG_DEBUG_KERNEL=n
    CONFIG_DYNAMIC_DEBUG=n
    CONFIG_DEBUG_INFO=n
    CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y
    EOF    

- name: Add sched_ext (6.6 only)
  if: ${{ env.KERNEL_VER == '6.6' }}
  shell: bash
  run: |
    set -euo pipefail
    cd "${CONFIG}/kernel_platform"
    git clone https://github.com/HanKuCha/sched_ext.git
    cp -r sched_ext/* ./common/kernel/sched/
    rm -rf sched_ext/.git

- name: Save Build Metadata
  id: save_metadata
  shell: bash
  run: |
    set -euo pipefail
    CONFIG_DIR="$GITHUB_WORKSPACE/${CONFIG}"
    ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
    mkdir -p "$ARTIFACTS_DIR"
    cd "$CONFIG_DIR/kernel_platform/common"
    BRANCH_LINE=$( (grep -m1 '^[[:space:]]*BRANCH=' build.config.common || grep -m1 '^[[:space:]]*BRANCH=' build.config.constants || true) )
    [[ -z "$BRANCH_LINE" ]] && { echo "BRANCH not found in build configs"; exit 1; }
    BRANCH_VALUE="${BRANCH_LINE#*=}"
    ANDROID_VERSION="${BRANCH_VALUE%-*}"
    VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
    PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
    SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
    FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
    COMBINED_VERSION="${ANDROID_VERSION}-${FULL_VERSION}"
    echo "${COMBINED_VERSION}" > "$ARTIFACTS_DIR/${{ inputs.model }}.txt"
    echo "kernel_version=${COMBINED_VERSION}" >> "$GITHUB_OUTPUT"
    echo "ksu_version=${KSU_BUILD_ID:-unknown}" >> "$GITHUB_OUTPUT"
    echo "susfs_version=${SUSFS_HUMAN_VERSION:-${SUSVER:-unknown}}" >> "$GITHUB_OUTPUT"

- name: Detect Clang
  shell: bash
  run: |
    set -euo pipefail
    KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
    CLANG_BIN=""
    for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
      [ -d "$base/clang/host/linux-x86" ] || continue
      mapfile -t dirs < <(find "$base/clang/host/linux-x86" -maxdepth 1 -type d -name 'clang-r*' 2>/dev/null | sort -V)
      if [ "${#dirs[@]}" -gt 0 ]; then
        CLANG_BIN="${dirs[-1]}/bin"
      fi
    done
    if [ -z "$CLANG_BIN" ] && command -v clang >/dev/null 2>&1; then
      CLANG_BIN="$(dirname "$(command -v clang)")"
      echo "Using system clang at $CLANG_BIN"
    fi
    [ -n "$CLANG_BIN" ] || { echo "No clang toolchain found"; exit 1; }
    echo "CLANG_BIN_PATH=$CLANG_BIN" >> "$GITHUB_ENV"
    CLANG_VERSION="$("$CLANG_BIN/clang" --version | head -n1)"
    echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_ENV"
    echo "Detected Clang: $CLANG_VERSION"

- name: Build Kernel
  shell: bash
  run: |
    set -euo pipefail
    KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
    COMMON="$KERNEL_PATH/common"
    cd "$COMMON"
    : > "$COMMON/.scmversion"
    if [ -n "${CLANG_BIN_PATH:-}" ] && [ -x "${CLANG_BIN_PATH}/clang" ]; then
      export PATH="${CLANG_BIN_PATH}:$PATH"
    fi
    export LLVM=1 LLVM_IAS=1
    export ARCH=arm64 SUBARCH=arm64
    export CROSS_COMPILE=aarch64-linux-android-
    export CROSS_COMPILE_COMPAT=arm-linux-androideabi-
    export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++
    export CC=clang
    OUT=out
    mkdir -p "$OUT"
    make O="$OUT" gki_defconfig
    if [ -n "${CUSTOM_LOCALVERSION:-}" ]; then
      scripts/config --file "$OUT/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
      scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO || true
    fi
    if [ "${{ inputs.optimize_level }}" = "O3" ]; then
      scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE
      scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
      export KCFLAGS="-Wno-error -pipe -O3 -fno-stack-protector"
    else
      scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE
      scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
      export KCFLAGS="-Wno-error -pipe -O2 -fno-stack-protector"
    fi
    export KCPPFLAGS="-DCONFIG_OPTIMIZE_INLINING"
    make O="$OUT" olddefconfig
    echo "Starting build with $(nproc --all) threads..."
    set -o pipefail
    make -j"$(nproc --all)" O="$OUT" 2>&1 | tee build.log
    IMG="$OUT/arch/arm64/boot/Image"
    if [ ! -f "$IMG" ]; then
      echo "Kernel Image missing"; exit 1
    fi
    sha256sum "$IMG" | tee "$OUT/Image.sha256"

- name: Apply KPM Patch (Optional)
  if: ${{ inputs.KPM }}
  shell: bash
  run: |
    set -euo pipefail
    OUT="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common/out"
    FINAL="$OUT/Final-Image"
    mkdir -p "$FINAL"
    cp "$OUT/arch/arm64/boot/Image" "$FINAL/Image"
    cd "$FINAL"
    curl -LO https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
    chmod +x patch_linux
    if ./patch_linux; then
      [[ -f oImage ]] && mv oImage Image
      cp Image "$GITHUB_WORKSPACE/AnyKernel3/Image"
      echo "KPM patch applied."
    else
      echo "KPM patch failed; using original Image."
      cp Image "$GITHUB_WORKSPACE/AnyKernel3/Image"
    fi

- name: Collect Build Stats / Validate Image
  id: collect_stats
  shell: bash
  run: |
    set -euo pipefail
    KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
    COMMON="$KERNEL_PATH/common"
    OUT="$COMMON/out"
    IMG="$OUT/arch/arm64/boot/Image"
    WARNINGS=$(grep -i 'warning:' "$COMMON/build.log" 2>/dev/null | grep -v '0 warnings' | wc -l || true)
    echo "$WARNINGS" > "$OUT/warnings.txt"
    if [ ! -f "$IMG" ]; then
      echo "ERROR: Kernel Image not found at $IMG"
      exit 1
    fi
    file "$IMG" > "$OUT/Image.file"
    if KERNEL_UNAME_LINE=$(strings "$IMG" 2>/dev/null | grep -E -m1 'Linux version'); then
      KERNEL_UNAME="$KERNEL_UNAME_LINE"
    else
      echo "Warning: Could not extract Linux version string from Image."
      KERNEL_UNAME="(unknown)"
    fi
    echo "KERNEL_UNAME=$KERNEL_UNAME" >> "$GITHUB_ENV"
    if ! file "$IMG" | grep -qi 'ARM64'; then
      echo "Image does not appear to be ARM64:"
      file "$IMG"
      exit 1
    fi
    MIN_SIZE=$((10 * 1024 * 1024))
    ACTUAL_SIZE=$(stat -c %s "$IMG")
    if [ "$ACTUAL_SIZE" -lt "$MIN_SIZE" ]; then
      echo "Image size $ACTUAL_SIZE < $MIN_SIZE (suspicious)"
      exit 1
    fi
    if [ -f "$OUT/Image.sha256" ]; then
      IMAGE_SHA256=$(cut -d' ' -f1 "$OUT/Image.sha256")
    else
      IMAGE_SHA256=$(sha256sum "$IMG" | cut -d' ' -f1)
      echo "$IMAGE_SHA256  $IMG" > "$OUT/Image.sha256"
    fi
    echo "warnings=$WARNINGS" >> "$GITHUB_OUTPUT"
    echo "image_sha256=$IMAGE_SHA256" >> "$GITHUB_OUTPUT"

- name: Create Kernel ZIP
  id: create_zip
  shell: bash
  run: |
    set -euo pipefail
    CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
    IMAGE_PATH="$CONFIG_DIR/kernel_platform/common/out/arch/arm64/boot/Image"
    if [ ! -f "$IMAGE_PATH" ]; then
      echo "ERROR: Built Image not found"
      exit 1
    fi
    cp "$IMAGE_PATH" "$GITHUB_WORKSPACE/AnyKernel3/Image"
    cd "$GITHUB_WORKSPACE/AnyKernel3"
    if [ "${{ inputs.model }}" = "OPAce5Pro" ] || [ "${{ inputs.model }}" = "OP13" ]; then
      cp "$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/bins/"* ./tools/ 2>/dev/null || true
      patch -F 3 < "$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/ak3_hmbird_patch.patch" || true
    fi
    ZIP_NAME="AnyKernel3_${{ inputs.model }}_${KERNEL_FULL_VER}_KSU_${KSU_BUILD_ID}_SUS_${SUSVER}.zip"
    ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
    mkdir -p "$ARTIFACTS_DIR"
    echo "Creating flashable zip: $ZIP_NAME"
    zip -r "$ARTIFACTS_DIR/$ZIP_NAME" ./* >/dev/null
    find "$ARTIFACTS_DIR" -maxdepth 1 -type f ! -name "$ZIP_NAME" ! -name "${{ inputs.model }}.txt" -delete
    echo "zip_name=$ZIP_NAME" >> "$GITHUB_OUTPUT"

- name: Final Build Summary
  shell: bash
  run: |
    set -euo pipefail
    {
      echo "Model: ${{ inputs.model }}"
      echo "Android: ${{ env.ANDROID_VER }}"
      echo "Kernel Version: ${{ steps.save_metadata.outputs.kernel_version }}"
      echo "Kernel Uname: ${{ env.KERNEL_UNAME }}"
      echo "KSU Version: ${KSU_BUILD_ID:-unknown}"
      echo "SUSFS Version: ${SUSFS_HUMAN_VERSION:-${SUSVER:-unknown}}"
      echo "Optimization: ${{ inputs.optimize_level }}"
      echo "Image SHA256: ${{ steps.collect_stats.outputs.image_sha256 }}"
      echo "Compiler: ${CLANG_VERSION:-unknown}"
      echo "Warnings: ${{ steps.collect_stats.outputs.warnings }}"
    } | tee summary.txt
    {
      echo "### Kernel Build Summary"
      echo ""
      echo "- Model: ${{ inputs.model }}"
      echo "- Android: ${{ env.ANDROID_VER }}"
      echo "- Kernel Version: ${{ steps.save_metadata.outputs.kernel_version }}"
      echo "- Kernel Uname: ${{ env.KERNEL_UNAME }}"
      echo "- KSU Version: ${KSU_BUILD_ID:-unknown}"
      echo "- SUSFS Version: ${SUSFS_HUMAN_VERSION:-${SUSVER:-unknown}}"
      echo "- Optimization: ${{ inputs.optimize_level }}"
      echo "- Image SHA256: ${{ steps.collect_stats.outputs.image_sha256 }}"
      echo "- Warnings: ${{ steps.collect_stats.outputs.warnings }}"
    } >> "$GITHUB_STEP_SUMMARY"

- name: Upload Artifacts
  if: success() && steps.create_zip.conclusion == 'success'
  uses: actions/upload-artifact@v4
  with:
    name: kernel-${{ env.CONFIG }}
    path: ${{ env.CONFIG }}/artifacts/
