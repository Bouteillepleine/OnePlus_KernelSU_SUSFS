name: Build
permissions:
  contents: write
  actions: write

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    required: true
    type: string
    default: ""
  KSU_META:
    description: 'SukiSU Ultra branch/custom version identifier (e.g., susfs-main/⚡Ultra⚡)'
    required: false
    type: string
    default: 'susfs-main/⚡Ultra⚡'
  KPM:
    description: 'Enable KPM?'
    required: true
    type: boolean
    default: true
  HOOK:
    description: 'Hook type'
    required: false
    type: choice
    default: manual
    options:
      - kprobe
      - manual
      - tracepoint

runs:
  using: composite
  steps:
    - name: Setup Build System
      shell: bash
      run: |
        set -e
        export DEBIAN_FRONTEND=noninteractive
        echo "DEBIAN_FRONTEND=noninteractive" >> "$GITHUB_ENV"
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
        sudo docker image prune --all --force || true
        sudo apt-get purge -y aria2 ansible azure-cli shellcheck rpm xorriso zsync esl-erlang firefox google-chrome-stable google-cloud-sdk imagemagick ant kubectl mercurial mono-complete yarn ruby-full subversion mongodb-org microsoft-edge-stable || true
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
    
    - name: Install Dependencies
      shell: bash
      run: |
        set -e
        sudo apt update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
          git curl python3 libelf-dev libelf1 lld build-essential flex bison libssl-dev \
          libncurses-dev liblz4-tool zlib1g-dev libxml2-utils rsync unzip dwarves
    
    - name: Repo Tool / Base Env
      shell: bash
      run: |
        set -e
        mkdir -p git-repo
        curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > git-repo/repo
        chmod +x git-repo/repo
        {
          echo "REPO=$GITHUB_WORKSPACE/git-repo/repo"
          echo "CONFIG=${{ inputs.model }}"
          echo "KANDROID_VERSION=${{ inputs.android_version }}"
          echo "KERNEL_VERSION=${{ inputs.kernel_version }}"
        } >> "$GITHUB_ENV"
    
    - name: Clone AnyKernel3 + Patch Repos
      shell: bash
      run: |
        set -e
        if [[ -z "${{ inputs.susfs_branch }}" ]]; then
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
        else
          SUSFS_BRANCH="${{ inputs.susfs_branch }}"
        fi
        echo "Using SUSFS_BRANCH=$SUSFS_BRANCH"
        # AnyKernel3
        if [ ! -d AnyKernel3/.git ]; then
          git clone --depth=1 https://github.com/Bouteillepleine/AnyKernel3.git -b gki-2.0 AnyKernel3
        fi
        # SukiSU_patch
        if [ -d SukiSU_patch/.git ]; then
          git -C SukiSU_patch fetch --depth=1 origin
          git -C SukiSU_patch reset --hard origin/HEAD
        else
          git clone --depth=1 https://github.com/ShirkNeko/SukiSU_patch.git
        fi
        # SUSFS repo
        if [ -d susfs4ksu/.git ]; then
          git -C susfs4ksu fetch origin "$SUSFS_BRANCH" || true
          git -C susfs4ksu checkout "$SUSFS_BRANCH" || true
        else
          git clone https://gitlab.com/simonpunk/susfs4ksu.git
          (cd susfs4ksu; git checkout "$SUSFS_BRANCH")
        fi
    
    - name: Initialize & Sync Kernel Source
      shell: bash
      run: |
        set -e
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls "${{ inputs.manifest }}" -o .repo/manifests/temp_manifest.xml
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b "${{ inputs.branch }}" -m "${{ inputs.manifest }}" --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        $REPO sync -c --no-clone-bundle --no-tags --optimized-fetch -j"$(nproc)" --fail-fast
    
    - name: Clean ABI Protected Exports
      shell: bash
      run: |
        set -e
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* msm-kernel/android/abi_gki_protected_exports_* || true
    
    - name: Branding
      shell: bash
      run: |
        set -e
        CUSTOM_LOCALVERSION="-${KANDROID_VERSION}-OP-⚡Ultra⚡"
        echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"
    
    - name: Add SukiSU Ultra
      shell: bash
      run: |
        set -e
        cd "$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        META="${{ inputs.ksu_meta }}"
        [ -z "$META" ] && { echo "ksu_meta empty"; exit 1; }
        BRANCH_NAME="${META%%/*}"
        CUSTOM_TAG="${META#*/}"
        if [[ "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then CUSTOM_TAG=""; fi
        curl -LSs https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh | bash -s "$BRANCH_NAME"
        cd KernelSU
        KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | grep -m1 'KSU_VERSION_API :=' | awk -F'= ' '{print $2}' | tr -d '[:space:]')
        [ -z "$KSU_API_VERSION" ] && KSU_API_VERSION="3.1.7"
        GIT_HASH=$(git rev-parse --short HEAD)
        if [ -n "$CUSTOM_TAG" ]; then
          VERSION_FULL="v${KSU_API_VERSION}-${CUSTOM_TAG}@${BRANCH_NAME}[${GIT_HASH}]"
        else
          VERSION_FULL="v${KSU_API_VERSION}-${GIT_HASH}@${BRANCH_NAME}"
        fi
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
        KSU_LOCAL_COUNT=$(git rev-list --count main 2>/dev/null || echo 13000)
        KSUVER=$((KSU_LOCAL_COUNT + 10700))
        echo "KSUVER=$KSUVER" >> $GITHUB_ENV
        MAKEFILE="kernel/Makefile"
        perl -0777 -i -pe 's/\ndefine get_ksu_version_full\n.*?\nendef\n//s; s/^\s*KSU_VERSION_API\s*:=.*\n//mg; s/^\s*KSU_VERSION_FULL\s*:=.*\n//mg;' "$MAKEFILE"
        BLOCK=$(cat <<EOF
        define get_ksu_version_full
        $VERSION_FULL
        endef
        
        KSU_VERSION_API := $KSU_API_VERSION
        KSU_VERSION_FULL := $VERSION_FULL
        EOF
        )
        if grep -q '^REPO_OWNER *:=' "$MAKEFILE"; then
        awk -v blk="$BLOCK" '/^REPO_OWNER *:=/ {print; print blk; next} {print}' "$MAKEFILE" > "$MAKEFILE.tmp" && mv "$MAKEFILE.tmp" "$MAKEFILE"
        else
        printf "\n%s\n" "$BLOCK" >> "$MAKEFILE"
        fi
        grep -A6 'REPO_OWNER' "$MAKEFILE" || true
    
      - name: Apply SUSFS + Ultra Patches
      shell: bash
      run: |
        set -e
        cd "$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch common/ || true
        cp ../../susfs4ksu/kernel_patches/fs/* common/fs/ 2>/dev/null || true
        cp ../../susfs4ksu/kernel_patches/include/linux/* common/include/linux/ 2>/dev/null || true
        cd common
        FILE_INPUT="${{ inputs.file }}"
        if [ "$KERNEL_VERSION" = "6.6" ] && [ -n "$FILE_INPUT" ]; then
          if ! grep -q 'common-modules/trusty' "$GITHUB_WORKSPACE/.repo/manifests_fallback/${FILE_INPUT}.xml" 2>/dev/null; then
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch || true
            sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch || true
          fi
        fi
        if patch --dry-run -p1 < 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch >/dev/null 2>&1; then
          patch -p1 < 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch
          echo "SUSFS patch applied"
        else
          echo "Warning: SUSFS patch failed to apply cleanly" >&2
        fi
        if [ -f include/linux/susfs.h ]; then
          SUSVER=$(grep '#define SUSFS_VERSION' include/linux/susfs.h | awk -F'"' '{print $2}')
        else
          SUSVER="unknown"
        fi
        echo "SUSVER=$SUSVER" >> $GITHUB_ENV
    
    - name: Apply Hide Stuff
      shell: bash
      run: |
        set -e
        cd "$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common"
        cp ../../SukiSU_patch/69_hide_stuff.patch ./
        patch -p1 -F 3 < 69_hide_stuff.patch || echo "Hide patch failed (ignored)"
    
    - name: Apply Hook
      shell: bash
      run: |
        set -e
        cd "$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common"
        case "${{ inputs.hook }}" in
          kprobe) echo "kprobe hook (built-in KPROBES flags)";;
          manual)
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch .
            patch -p1 -F 3 < syscall_hooks.patch
            ;;
          tracepoint)
            cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch .
            patch -p1 -F 3 < tracepoint_hooks.patch
            ;;
        esac
    
    - name: Append Config
      shell: bash
      run: |
        set -e
        CFG="$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common/arch/arm64/configs/gki_defconfig"
        {
          echo ""
          echo "# SukiSU Ultra Core"
          echo "CONFIG_KSU=y"
          if [ "${{ inputs.kpm }}" = "true" ]; then echo "CONFIG_KPM=y"; fi
          case "${{ inputs.hook }}" in
            kprobe)
              echo "CONFIG_KSU_SUSFS_SUS_SU=y"
              echo "CONFIG_KPROBES=y"
              echo "CONFIG_KSU_KPROBES_HOOK=y"
              ;;
            manual) echo "CONFIG_KSU_MANUAL_HOOK=y";;
            tracepoint) echo "CONFIG_KSU_TRACEPOINT_HOOK=y";;
          esac
          echo "CONFIG_KSU_SUSFS=y"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
          echo ""
          echo "# Network"
          echo "CONFIG_TCP_CONG_ADVANCED=y"
          echo "CONFIG_TCP_CONG_BBR=y"
          echo "CONFIG_NET_SCH_FQ=y"
          echo "CONFIG_NET_SCH_FQ_CODEL=y"
          echo "CONFIG_IP_ECN=y"
          echo "CONFIG_TCP_ECN=y"
          echo "CONFIG_IPV6_ECN=y"
          echo "CONFIG_IP_NF_TARGET_TTL=y"
          echo "CONFIG_IP6_NF_TARGET_HL=y"
          echo "CONFIG_IP6_NF_MATCH_HL=y"
          echo ""
          echo "# Build Optimizations"
          echo "CONFIG_LTO_CLANG_THIN=y"
          echo "CONFIG_LTO_CLANG=y"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n"
          echo "CONFIG_OPTIMIZE_INLINING=y" 
          echo "CONFIG_DEBUG_KERNEL=n"
          echo "CONFIG_DYNAMIC_DEBUG=n"
          echo "CONFIG_DEBUG_INFO=n"
          echo "CONFIG_DAMON=n"
          echo "CONFIG_CRYPTO_SHA1_ARM64_CE=y"
          echo "CONFIG_VIRTIO_PCI_LEGACY=y"
          echo "CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y"
          echo "CONFIG_HEADERS_INSTALL=n"
          echo "CONFIG_PROC_MEM_ALWAYS_FORCE=n"
        } >> "$CFG"
        sed -i -e '/CONFIG_NET_SCH_FQ_CODEL=/d' -e '$aCONFIG_NET_SCH_FQ_CODEL=y' "$CFG"
    
    - name: Metadata
      shell: bash
      run: |
        set -e
        ART="$GITHUB_WORKSPACE/$CONFIG/artifacts"
        mkdir -p "$ART"
        cd "$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common"
        BRANCH_LINE=$(grep -h '^[[:space:]]*BRANCH=' build.config.* 2>/dev/null | head -n1 || true)
        [ -z "$BRANCH_LINE" ] && { echo "BRANCH= not found"; exit 1; }
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VER="${BRANCH_VALUE%-*}"
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        echo "ANDROID_VER=$ANDROID_VER" >> $GITHUB_ENV
        echo "$ANDROID_VER-$VERSION.$PATCHLEVEL.$SUBLEVEL" > "$ART/${CONFIG}.txt"
    
    - name: Detect Clang
      shell: bash
      run: |
        set -e
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          if [ -d "$base/clang/host/linux-x86" ]; then
            cand=$(ls -d "$base"/clang/host/linux-x86/clang-r*/ 2>/dev/null | tail -n1 | xargs basename)
            [ -n "$cand" ] && echo "CLANG_BIN_PATH=$base/clang/host/linux-x86/$cand/bin" >> $GITHUB_ENV && break
          fi
        done
    
    - name: Build Kernel
      shell: bash
      run: |
        set -euo pipefail
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COM="$KP/common"
        OUT="$COM/out"
        cd "$COM"
        if [[ -n "${CLANG_BIN_PATH:-}" && -x "${CLANG_BIN_PATH}/clang" ]]; then
          export PATH="${CLANG_BIN_PATH}:$PATH"
        fi
        export LLVM=1 ARCH=arm64 SUBARCH=arm64
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androidkernel-
        export KCFLAGS="-O2 -pipe -Wno-error -fno-stack-protector"
        export KCPPFLAGS="-DCONFIG_OPTIMIZE_INLINING"
        mkdir -p "$OUT"
        make -j"$(nproc)" O="$OUT" gki_defconfig
        make O="$OUT" olddefconfig
        scripts/config --file "$OUT/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
        scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO || true
        : > .scmversion
        make O="$OUT" olddefconfig
        make -j"$(nproc)" O="$OUT"
        IMAGE="$OUT/arch/arm64/boot/Image"
        [ -f "$IMAGE" ] || { echo "Image missing"; exit 1; }
        sha256sum "$IMAGE" | tee "$OUT/Image.sha256"
        cp "$IMAGE" "$GITHUB_WORKSPACE/AnyKernel3/Image"
    
    - name: KPM patch_linux
      if: ${{ inputs.kpm == 'true' }}
      shell: bash
      run: |
        set -e
        OUT="$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common/out"
        FINAL="$OUT/Final-Image"
        mkdir -p "$FINAL"
        cp "$OUT/arch/arm64/boot/Image" "$FINAL/Image"
        cd "$FINAL"
        curl -LO https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
        chmod +x patch_linux
        ./patch_linux || echo "patch_linux failed; keeping original"
        [ -f oImage ] && mv oImage Image
        cp Image "$GITHUB_WORKSPACE/AnyKernel3/Image"
    
    - name: Create Flashable ZIP
      shell: bash
      run: |
        set -e
        ART="$GITHUB_WORKSPACE/$CONFIG/artifacts"
        mkdir -p "$ART"
        ZIP="AnyKernel3_${{ inputs.model }}_${KANDROID_VERSION}-${KERNEL_VERSION}_SukiSU_${KSUVER}_SUSFS_${SUSVER}.zip"
        (cd "$GITHUB_WORKSPACE/AnyKernel3"; zip -r "$ART/$ZIP" ./*)
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: ${{ env.CONFIG }}/artifacts/*
